from telebot.types import Message
from database.models.running_log import RunningLog
from handlers.base_handler import BaseHandler
from datetime import datetime, date
from config.config import ADMIN_IDS
from database.db import get_connection
from database.models.user import User
from database.models.challenge import Challenge

class AdminHandler(BaseHandler):
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.logger.info("Registering admin handlers")
        
        self.bot.register_message_handler(
            self.handle_delete_test_data,
            commands=['delete_test_data'],
            func=lambda message: str(message.from_user.id) in ADMIN_IDS
        )
        
        self.bot.register_message_handler(
            self.handle_report,
            commands=['report'],
            func=lambda message: str(message.from_user.id) in ADMIN_IDS
        )
        
        self.logger.info("Admin handlers registered successfully")
        
    def handle_delete_test_data(self, message: Message):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 7-8 —è–Ω–≤–∞—Ä—è 2025"""
        try:
            user_id = str(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if user_id not in ADMIN_IDS:
                self.bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ 7-8 —è–Ω–≤–∞—Ä—è 2025
            start_date = date(2025, 1, 7)
            end_date = date(2025, 1, 8)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            conn = get_connection()
            cursor = conn.cursor()
            try:
                cursor.execute(
                    """SELECT user_id, km, date_added 
                       FROM running_log 
                       WHERE date_added BETWEEN ? AND ?""",
                    (start_date.isoformat(), end_date.isoformat())
                )
                records = cursor.fetchall()
                
                if not records:
                    self.bot.reply_to(message, "‚ùå –ó–∞–ø–∏—Å–µ–π –∑–∞ 7-8 —è–Ω–≤–∞—Ä—è 2025 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
                preview = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                for user_id, km, date_added in records:
                    preview += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                    preview += f"üèÉ‚Äç‚ôÇÔ∏è –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {km} –∫–º\n"
                    preview += f"üìÖ –î–∞—Ç–∞: {date_added}\n\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                self.bot.reply_to(message, preview)
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏
                deleted_count = RunningLog.delete_entries_by_date_range(start_date, end_date)
                
                self.bot.reply_to(
                    message,
                    f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ 7-8 —è–Ω–≤–∞—Ä—è 2025"
                )
            finally:
                cursor.close()
                conn.close()
            
        except Exception as e:
            self.logger.error(f"Error in handle_delete_test_data: {e}")
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    def handle_report(self, message: Message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            user_id = str(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if user_id not in ADMIN_IDS:
                self.bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü
            current_year = datetime.now().year
            current_month = datetime.now().month
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            report = self.generate_report(current_year, current_month)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            self.bot.reply_to(
                message,
                report,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            self.logger.error(f"Error in handle_report: {e}")
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

    def generate_report(self, year: int, month: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π HTML-–æ—Ç—á–µ—Ç"""
        report = f"<b>üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {year} –≥–æ–¥</b>\n\n"
        
        # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_stats = RunningLog.get_total_stats(year)
        report += "<b>üåü –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {total_stats['runs_count']}\n"
        report += f"‚Ä¢ –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_stats['total_km']:.2f} –∫–º\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_stats['users_count']}\n"
        if total_stats['runs_count'] > 0:
            report += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_stats['avg_km']:.2f} –∫–º\n"
        report += "\n"
        
        # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        report += f"<b>üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º {year} –≥–æ–¥–∞</b>\n"
        for m in range(1, month + 1):
            month_stats = RunningLog.get_total_stats(year, m)
            report += f"\n<b>{m:02d}.{year}</b>\n"
            report += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {month_stats['runs_count']}\n"
            report += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats['total_km']:.2f} –∫–º\n"
            report += f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {month_stats['users_count']}\n"
        report += "\n"
        
        # 3. –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_runners = RunningLog.get_top_runners(year=year, limit=10)
        report += "<b>üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        for i, runner in enumerate(top_runners, 1):
            user = User.get_by_id(runner['user_id'])
            username = user.username if user else "Unknown"
            report += f"{i}. {username}\n"
            report += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {runner['total_km']:.2f} –∫–º\n"
            report += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {runner['runs_count']}\n"
            report += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {runner['avg_km']:.2f} –∫–º\n"
            report += f"‚Ä¢ –õ—É—á—à–∞—è: {runner['best_run']:.2f} –∫–º\n\n"
        
        # 4. –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
        challenges = Challenge.get_active_challenges()
        report += "<b>üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏</b>\n\n"
        for challenge in challenges:
            total_km = challenge.get_total_progress()
            participants_count = challenge.get_participants_count()
            progress = (total_km / challenge.goal_km * 100) if challenge.goal_km and challenge.goal_km > 0 else 0
            
            report += f"<b>{challenge.title}</b>\n"
            report += f"‚Ä¢ –¶–µ–ª—å: {challenge.goal_km:.2f} –∫–º\n"
            report += f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.2f} –∫–º ({progress:.2f}%)\n"
            report += f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n\n"
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º
        report += "<b>üí¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º</b>\n\n"
        chat_stats = RunningLog.get_chat_stats_all(year)
        for chat in chat_stats:
            report += f"<b>–ß–∞—Ç: {chat['chat_id']}</b>\n"
            report += f"‚Ä¢ –ü—Ä–æ–±–µ–∂–µ–∫: {chat['runs_count']}\n"
            report += f"‚Ä¢ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {chat['total_km']:.2f} –∫–º\n"
            report += f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat['users_count']}\n\n"
        
        return report

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    handler = AdminHandler(bot)
    handler.register() 