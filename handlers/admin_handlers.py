from telebot.types import Message
from database.models.running_log import RunningLog
from handlers.base_handler import BaseHandler
from datetime import datetime, date
from config.config import ADMIN_IDS
from database.db import get_connection

class AdminHandler(BaseHandler):
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.logger.info("Registering admin handlers")
        
        self.bot.register_message_handler(
            self.handle_delete_test_data,
            commands=['delete_test_data'],
            func=lambda message: str(message.from_user.id) in ADMIN_IDS
        )
        
        self.logger.info("Admin handlers registered successfully")
        
    def handle_delete_test_data(self, message: Message):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 7-8 —è–Ω–≤–∞—Ä—è 2025"""
        try:
            user_id = str(message.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if user_id not in ADMIN_IDS:
                self.bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ 7-8 —è–Ω–≤–∞—Ä—è 2025
            start_date = date(2025, 1, 7)
            end_date = date(2025, 1, 8)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            conn = get_connection()
            cursor = conn.cursor()
            try:
                cursor.execute(
                    """SELECT user_id, km, date_added 
                       FROM running_log 
                       WHERE date_added BETWEEN ? AND ?""",
                    (start_date.isoformat(), end_date.isoformat())
                )
                records = cursor.fetchall()
                
                if not records:
                    self.bot.reply_to(message, "‚ùå –ó–∞–ø–∏—Å–µ–π –∑–∞ 7-8 —è–Ω–≤–∞—Ä—è 2025 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
                preview = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
                for user_id, km, date_added in records:
                    preview += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                    preview += f"üèÉ‚Äç‚ôÇÔ∏è –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {km} –∫–º\n"
                    preview += f"üìÖ –î–∞—Ç–∞: {date_added}\n\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                self.bot.reply_to(message, preview)
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏
                deleted_count = RunningLog.delete_entries_by_date_range(start_date, end_date)
                
                self.bot.reply_to(
                    message,
                    f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ 7-8 —è–Ω–≤–∞—Ä—è 2025"
                )
            finally:
                cursor.close()
                conn.close()
            
        except Exception as e:
            self.logger.error(f"Error in handle_delete_test_data: {e}")
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    handler = AdminHandler(bot)
    handler.register() 