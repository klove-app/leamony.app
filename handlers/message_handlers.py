from telebot.types import Message
from database.models.user import User
from database.models.running_log import RunningLog
from datetime import datetime
from handlers.base_handler import BaseHandler

class MessageHandler(BaseHandler):
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info("Registering message handlers")
        
        self.bot.register_message_handler(
            self.handle_text,
            content_types=['text'],
            func=lambda message: message.reply_to_message is not None
        )
        
        self.logger.info("Message handlers registered successfully")

    def handle_text(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.log_message(message, "text")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message and message.reply_to_message.from_user.username == self.bot.get_me().username:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ
            bot_mention = f"@{self.bot.get_me().username}"
            if bot_mention not in message.text:
                return
                
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
                km = float(message.text.replace(bot_mention, "").strip())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
                if km > 100:
                    self.bot.reply_to(message, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - 100 –∫–º")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–µ–∂–∫–µ
                chat_id = str(message.chat.id) if message.chat.type != 'private' else None
                if RunningLog.add_entry(
                    user_id=str(message.from_user.id),
                    km=km,
                    date_added=datetime.now().date(),
                    chat_id=chat_id
                ):
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = User.get_by_id(str(message.from_user.id))
                    total_km = RunningLog.get_user_total_km(str(message.from_user.id))
                    
                    response = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ–±–µ–∂–∫–∞ {km:.2f} –∫–º!\n"
                    if user and user.goal_km > 0:
                        progress = (total_km / user.goal_km * 100)
                        response += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.2f} –∏–∑ {user.goal_km:.2f} –∫–º ({progress:.2f}%)"
                    
                    self.bot.reply_to(message, response)
                    self.logger.info(f"Logged run: {km}km for user {message.from_user.id}")
                else:
                    self.bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É")
                    
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                pass

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    handler = MessageHandler(bot)
    handler.register() 