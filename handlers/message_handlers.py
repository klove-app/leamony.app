from telebot.types import Message
from database.models.user import User
from database.models.running_log import RunningLog
from datetime import datetime
from handlers.base_handler import BaseHandler
from main import send_achievement_message

class MessageHandler(BaseHandler):
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info("Registering message handlers")
        
        self.bot.register_message_handler(
            self.handle_text,
            content_types=['text'],
            func=lambda message: (
                message.chat.type == 'private' or
                (self.bot.get_me().username and f"@{self.bot.get_me().username}" in message.text)
            )
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        self.bot.register_message_handler(
            self.handle_photo_run,
            content_types=['photo'],
            func=lambda message: True
        )
        
        self.logger.info("Message handlers registered successfully")

    def handle_text(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.log_message(message, "text")
        
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
            text = message.text
            if self.bot.get_me().username:
                text = text.replace(f"@{self.bot.get_me().username}", "").strip()
            
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Ç–æ—á–∫—É, –∏ –∑–∞–ø—è—Ç—É—é)
            import re
            number_match = re.search(r'(\d+[.,]?\d*)', text)
            if not number_match:
                if message.chat.type == 'private':
                    self.bot.reply_to(
                        message,
                        "‚ö†Ô∏è *–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤*\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "‚Ä¢ `5.2` - –ø—Ä–æ—Å—Ç–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂\n"
                        "‚Ä¢ `5.2 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞` - —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                        parse_mode='Markdown'
                    )
                return
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ float
            km = float(number_match.group(1).replace(',', '.'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            if km > 100:
                self.bot.reply_to(message, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - 100 –∫–º")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–≤—Å—ë –ø–æ—Å–ª–µ —á–∏—Å–ª–∞)
            description = text[number_match.end():].strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–µ–∂–∫–µ
            chat_id = str(message.chat.id) if message.chat.type != 'private' else None
            if RunningLog.add_entry(
                user_id=str(message.from_user.id),
                km=km,
                date_added=datetime.now().date(),
                notes=description if description else None,
                chat_id=chat_id
            ):
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User.get_by_id(str(message.from_user.id))
                total_km = RunningLog.get_user_total_km(str(message.from_user.id))
                
                response = f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ–±–µ–∂–∫–∞ {km:.2f} –∫–º"
                if description:
                    response += f"\nüìù {description}"
                    
                if user and user.goal_km > 0:
                    progress = (total_km / user.goal_km * 100)
                    response += f"\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.2f} –∏–∑ {user.goal_km:.2f} –∫–º ({progress:.2f}%)"
                
                self.bot.reply_to(message, response)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if km >= 5:  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–±–µ–∂–µ–∫ –æ—Ç 5 –∫–º
                    try:
                        username = message.from_user.username or message.from_user.first_name
                        date = datetime.now().strftime('%d.%m.%Y')
                        send_achievement_message(message, km)
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                self.logger.info(f"Logged run: {km}km for user {message.from_user.id}")
            else:
                self.bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É")
                
        except ValueError as e:
            self.logger.error(f"Error parsing message: {e}")
            if message.chat.type == 'private':
                self.bot.reply_to(
                    message,
                    "‚ö†Ô∏è *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "‚Ä¢ `5.2` - –ø—Ä–æ—Å—Ç–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂\n"
                    "‚Ä¢ `5.2 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞` - —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                    parse_mode='Markdown'
                )

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    handler = MessageHandler(bot)
    handler.register() 