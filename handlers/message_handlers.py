from telebot.types import Message
from database.models.user import User
from database.models.running_log import RunningLog
from datetime import datetime
from handlers.base_handler import BaseHandler
from main import send_achievement_message
import traceback

class MessageHandler(BaseHandler):
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info("Registering message handlers")
        
        self.bot.register_message_handler(
            self.handle_text,
            content_types=['text'],
            func=lambda message: (
                message.chat.type == 'private' or
                (self.bot.get_me().username and f"@{self.bot.get_me().username}" in message.text)
            )
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        self.bot.register_message_handler(
            self.handle_photo_run,
            content_types=['photo'],
            func=lambda message: True
        )
        
        self.logger.info("Message handlers registered successfully")

    def handle_text(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.log_message(message, "text")
        
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
            text = message.text
            if self.bot.get_me().username:
                text = text.replace(f"@{self.bot.get_me().username}", "").strip()
            
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Ç–æ—á–∫—É, –∏ –∑–∞–ø—è—Ç—É—é)
            import re
            number_match = re.search(r'(\d+[.,]?\d*)', text)
            if not number_match:
                if message.chat.type == 'private':
                    self.bot.reply_to(
                        message,
                        "‚ö†Ô∏è *–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤*\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "‚Ä¢ `5.2` - –ø—Ä–æ—Å—Ç–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂\n"
                        "‚Ä¢ `5.2 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞` - —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                        parse_mode='Markdown'
                    )
                return
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ float
            km = float(number_match.group(1).replace(',', '.'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            if km > 100:
                self.bot.reply_to(message, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è - 100 –∫–º")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–≤—Å—ë –ø–æ—Å–ª–µ —á–∏—Å–ª–∞)
            description = text[number_match.end():].strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–µ–∂–∫–µ
            chat_id = str(message.chat.id) if message.chat.type != 'private' else None
            if RunningLog.add_entry(
                user_id=str(message.from_user.id),
                km=km,
                date_added=datetime.now().date(),
                notes=description if description else None,
                chat_id=chat_id
            ):
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User.get_by_id(str(message.from_user.id))
                total_km = RunningLog.get_user_total_km(str(message.from_user.id))
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü –∏ –≥–æ–¥
                current_year = datetime.now().year
                current_month = datetime.now().month
                
                year_stats = RunningLog.get_user_stats(str(message.from_user.id), current_year)
                month_stats = RunningLog.get_user_stats(str(message.from_user.id), current_year, current_month)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                response = (
                    f"üéâ –ù–æ–≤–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n"
                    f"üìç {km:.1f} –∫–º\n"
                    f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
                    
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {datetime.now().strftime('%B')}:\n"
                    f"üèÉ {month_stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                    f"üìè {month_stats['total_km']:.1f} –∫–º –≤—Å–µ–≥–æ\n"
                    f"‚åÄ {month_stats['avg_km']:.1f} –∫–º –≤ —Å—Ä–µ–¥–Ω–µ–º\n\n"
                    
                    f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {current_year}:\n"
                    f"üèÉ {year_stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                    f"üìè {year_stats['total_km']:.1f} –∫–º –≤—Å–µ–≥–æ\n"
                    f"‚åÄ {year_stats['avg_km']:.1f} –∫–º –≤ —Å—Ä–µ–¥–Ω–µ–º"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–¥–æ–≤–æ–π —Ü–µ–ª–∏
                if user and user.goal_km > 0:
                    progress = (total_km / user.goal_km * 100)
                    progress_bar = "‚ñà" * int(progress / 5) + "‚ñë" * (20 - int(progress / 5))
                    remaining = user.goal_km - total_km
                    response += (
                        f"\n\nüéØ –ì–æ–¥–æ–≤–∞—è —Ü–µ–ª—å:\n"
                        f"üé™ {user.goal_km:.0f} –∫–º\n"
                        f"‚ñ∏ {progress_bar} {progress:.1f}%\n"
                        f"üìç –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –∫–º"
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if km >= 10:
                    response += "\n\nüî• –û—Ç–ª–∏—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞!"
                elif km >= 5:
                    response += "\n\nüí™ –•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!"
                else:
                    response += "\n\nüëç –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
                
                # –î–ª—è –ø—Ä–æ–±–µ–∂–µ–∫ –æ—Ç 5 –∫–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if km >= 5:
                    try:
                        username = message.from_user.username or message.from_user.first_name
                        date = datetime.now().strftime('%d.%m.%Y')
                        from main import generate_achievement_image
                        image_data = generate_achievement_image(km, username, date)
                        if image_data:
                            from io import BytesIO
                            photo = BytesIO(image_data)
                            photo.name = 'achievement.png'
                            self.bot.send_photo(
                                message.chat.id,
                                photo,
                                caption=response,
                                parse_mode='Markdown',
                                reply_to_message_id=message.message_id
                            )
                        else:
                            self.bot.reply_to(message, response, parse_mode='Markdown')
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        self.bot.reply_to(message, response, parse_mode='Markdown')
                else:
                    self.bot.reply_to(message, response, parse_mode='Markdown')
                
                self.logger.info(f"Logged run: {km}km for user {message.from_user.id}")
            else:
                self.bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É")
                
        except ValueError as e:
            self.logger.error(f"Error parsing message: {e}")
            if message.chat.type == 'private':
                self.bot.reply_to(
                    message,
                    "‚ö†Ô∏è *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "‚Ä¢ `5.2` - –ø—Ä–æ—Å—Ç–æ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂\n"
                    "‚Ä¢ `5.2 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞` - —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                    parse_mode='Markdown'
                )

    def handle_photo_run(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é"""
        self.logger.info(f"Processing photo message with caption: {message.caption}")
        self.logger.info(f"Chat type: {message.chat.type}, Chat ID: {message.chat.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –±–æ—Ç—É
        is_bot_mentioned = False
        if message.reply_to_message and message.reply_to_message.from_user.id == self.bot.get_me().id:
            is_bot_mentioned = True
        elif self.bot.get_me().username and message.caption and f"@{self.bot.get_me().username}" in message.caption:
            is_bot_mentioned = True
        elif message.chat.type == 'private':
            is_bot_mentioned = True
            
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –±–æ—Ç—É - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if not is_bot_mentioned:
            return
        
        if not message.caption:
            self.logger.warning("No caption provided with photo")
            self.bot.reply_to(
                message,
                "‚ö†Ô∏è *–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–µ–º*\n\n"
                "–ü—Ä–∏–º–µ—Ä: `5.2` –∏–ª–∏ `5.2 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞`",
                parse_mode='Markdown'
            )
            return
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ –ø–æ–¥–ø–∏—Å–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Ü–µ–ª—ã–µ –∏ –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
            first_word = message.caption.split()[0]
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª)
            try:
                km = float(first_word)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É (–¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö)
                km = float(first_word.replace(',', '.'))
            
            self.logger.info(f"Extracted distance from caption: {km} km")
            
            if km <= 0:
                self.logger.warning(f"Invalid distance: {km} km")
                self.bot.reply_to(
                    message,
                    "‚ö†Ô∏è *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤",
                    parse_mode='Markdown'
                )
                return
                
            user_id = str(message.from_user.id)
            chat_id = str(message.chat.id)
            chat_type = message.chat.type
            
            self.logger.info(f"User ID: {user_id}, Chat ID: {chat_id}, Chat Type: {chat_type}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.get_by_id(user_id)
            self.logger.debug(f"Found user: {user}")
            
            if not user:
                username = message.from_user.username or message.from_user.first_name
                self.logger.info(f"Creating new user: {username}")
                user = User.create(user_id=user_id, username=username)
                self.logger.info(f"Created new user: {username} ({user_id})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–µ–∂–∫–µ
            self.logger.info(f"Adding run entry with photo: {km} km")
            success = RunningLog.add_entry(
                user_id=user_id,
                km=km,
                date_added=datetime.now().date(),
                notes=message.caption,
                chat_id=chat_id,
                chat_type=chat_type
            )
            
            if success:
                self.logger.info("Run entry with photo added successfully")
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_km = RunningLog.get_user_total_km(user_id)
                self.logger.debug(f"Total km: {total_km}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü –∏ –≥–æ–¥
                current_year = datetime.now().year
                current_month = datetime.now().month
                
                year_stats = RunningLog.get_user_stats(user_id, current_year)
                month_stats = RunningLog.get_user_stats(user_id, current_year, current_month)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                response = (
                    f"üéâ –ù–æ–≤–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n"
                    f"üìç {km:.1f} –∫–º\n"
                    f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
                    
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {datetime.now().strftime('%B')}:\n"
                    f"üèÉ {month_stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                    f"üìè {month_stats['total_km']:.1f} –∫–º –≤—Å–µ–≥–æ\n"
                    f"‚åÄ {month_stats['avg_km']:.1f} –∫–º –≤ —Å—Ä–µ–¥–Ω–µ–º\n\n"
                    
                    f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {current_year}:\n"
                    f"üèÉ {year_stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                    f"üìè {year_stats['total_km']:.1f} –∫–º –≤—Å–µ–≥–æ\n"
                    f"‚åÄ {year_stats['avg_km']:.1f} –∫–º –≤ —Å—Ä–µ–¥–Ω–µ–º"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–¥–æ–≤–æ–π —Ü–µ–ª–∏
                if user and user.goal_km > 0:
                    progress = (total_km / user.goal_km * 100)
                    progress_bar = "‚ñà" * int(progress / 5) + "‚ñë" * (20 - int(progress / 5))
                    remaining = user.goal_km - total_km
                    response += (
                        f"\n\nüéØ –ì–æ–¥–æ–≤–∞—è —Ü–µ–ª—å:\n"
                        f"üé™ {user.goal_km:.0f} –∫–º\n"
                        f"‚ñ∏ {progress_bar} {progress:.1f}%\n"
                        f"üìç –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –∫–º"
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if km >= 10:
                    response += "\n\nüî• –û—Ç–ª–∏—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞!"
                elif km >= 5:
                    response += "\n\nüí™ –•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!"
                else:
                    response += "\n\nüëç –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
                
                # –î–ª—è –ø—Ä–æ–±–µ–∂–µ–∫ –æ—Ç 5 –∫–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if km >= 5:
                    try:
                        username = message.from_user.username or message.from_user.first_name
                        date = datetime.now().strftime('%d.%m.%Y')
                        from main import generate_achievement_image
                        image_data = generate_achievement_image(km, username, date)
                        if image_data:
                            from io import BytesIO
                            photo = BytesIO(image_data)
                            photo.name = 'achievement.png'
                            self.bot.send_photo(
                                message.chat.id,
                                photo,
                                caption=response,
                                parse_mode='Markdown',
                                reply_to_message_id=message.message_id
                            )
                        else:
                            self.bot.reply_to(message, response, parse_mode='Markdown')
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        self.bot.reply_to(message, response, parse_mode='Markdown')
                else:
                    self.bot.reply_to(message, response, parse_mode='Markdown')
                
                self.logger.info(f"Logged run with photo: {km}km for user {user_id}")
            else:
                self.logger.error(f"Failed to save run with photo for user {user_id}")
                error_message = (
                    "‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )
                self.bot.reply_to(message, error_message, parse_mode='Markdown')
            return
                
        except ValueError:
            self.logger.warning(f"Invalid caption format: {message.caption}")
            self.bot.reply_to(
                message,
                "‚ö†Ô∏è *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞*\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é\n"
                "–ü—Ä–∏–º–µ—Ä: `5.2` –∏–ª–∏ `5,2`",
                parse_mode='Markdown'
            )
        except Exception as e:
            self.logger.error(f"Error in handle_photo_run: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            error_message = (
                "üòî *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
            self.bot.reply_to(message, error_message, parse_mode='Markdown')

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    handler = MessageHandler(bot)
    handler.register() 