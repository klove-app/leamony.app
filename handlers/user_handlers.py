from bot_instance import bot
from telebot import types
from database.logger import logger
from database.models.user import User
from database.models.challenge import Challenge
from datetime import datetime

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def create_period_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    keyboard = types.InlineKeyboardMarkup()
    current_year = datetime.now().year
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–¥–æ–≤
    keyboard.row(
        types.InlineKeyboardButton(f"{current_year} –≥–æ–¥", callback_data=f"goal_year_{current_year}"),
        types.InlineKeyboardButton(f"{current_year + 1} –≥–æ–¥", callback_data=f"goal_year_{current_year + 1}")
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    current_quarter = (datetime.now().month - 1) // 3 + 1
    row = []
    for q in range(current_quarter, 5):
        row.append(types.InlineKeyboardButton(
            f"{q} –∫–≤–∞—Ä—Ç–∞–ª {current_year}",
            callback_data=f"goal_quarter_{current_year}_{q}"
        ))
        if len(row) == 2:
            keyboard.row(*row)
            row = []
    if row:
        keyboard.row(*row)
    
    return keyboard

@bot.message_handler(commands=['setgoal'])
def set_goal(message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π —Ü–µ–ª—å—é"""
    try:
        user_id = str(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_goals = Challenge.get_all_user_challenges(user_id)
        print(f">>> Found goals: {user_goals}")
        
        if user_goals:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ü–µ–ª–µ–π
            goals_text = "üéØ –í–∞—à–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏:\n\n"
            for goal in user_goals:
                year = goal.start_date[:4]
                total_km = goal.get_year_progress()
                progress = (total_km / goal.goal_km * 100) if goal.goal_km > 0 else 0
                goals_text += (
                    f"üìÖ {year} –≥–æ–¥:\n"
                    f"–¶–µ–ª—å: {goal.goal_km:.1f} –∫–º\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.1f} –∫–º ({progress:.1f}%)\n\n"
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            markup.add("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", "‚ùå –û—Ç–º–µ–Ω–∞")
            goals_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
        else:
            goals_text = "üéØ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏:"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            current_year = datetime.now().year
            markup.add(
                f"üìÖ –¶–µ–ª—å –Ω–∞ {current_year}",
                f"üìÖ –¶–µ–ª—å –Ω–∞ {current_year + 1}"
            )
        
        bot.reply_to(message, goals_text, reply_markup=markup)
        bot.register_next_step_handler(message, process_goal_action)
        
    except Exception as e:
        print(f">>> ERROR in set_goal: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def process_goal_action(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å —Ü–µ–ª—è–º–∏"""
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            bot.reply_to(
                message, 
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return
            
        if message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å":
            bot.reply_to(
                message,
                "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(message, process_goal_update)
            return
            
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≥–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏
        if message.text.startswith("üìÖ –¶–µ–ª—å –Ω–∞"):
            process_goal_year(message)
            
    except Exception as e:
        print(f">>> ERROR in process_goal_action: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def process_goal_update(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏"""
    try:
        user_id = str(message.from_user.id)
        year = datetime.now().year
        
        try:
            new_goal_km = float(message.text.replace(',', '.'))
            if new_goal_km <= 0:
                raise ValueError
        except ValueError:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
        current_goal = Challenge.get_user_challenge(user_id, year)
        if current_goal:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏
            current_goal.goal_km = new_goal_km
            current_goal.save()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            total_km = current_goal.get_year_progress()
            progress = (total_km / new_goal_km * 100) if new_goal_km > 0 else 0
            
            bot.reply_to(
                message,
                f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üìÖ –ì–æ–¥: {year}\n"
                f"üéØ –ù–æ–≤–∞—è —Ü–µ–ª—å: {new_goal_km:.1f} –∫–º\n"
                f"üë£ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.1f} –∫–º\n"
                f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress:.1f}%",
                reply_markup=types.ReplyKeyboardRemove()
            )
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å")
            
    except Exception as e:
        print(f">>> ERROR in process_goal_update: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏")

def process_goal_year(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ–¥–∞ –¥–ª—è —Ü–µ–ª–∏"""
    try:
        print(f"\n>>> Processing goal year: {message.text}")
        if "–¶–µ–ª—å –Ω–∞" not in message.text:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return
            
        year = message.text.split()[-1]  # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        user_id = str(message.from_user.id)
        print(f">>> Selected year: {year} for user: {user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['setting_goal_for'] = {'year': year}
        print(f">>> Saved year data: {user_data[user_id]}")
        
        bot.reply_to(
            message,
            f"–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –¥–ª—è {year} –≥–æ–¥–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_goal_km)
        
    except Exception as e:
        print(f">>> ERROR in process_goal_year: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('goal_'))
def handle_goal_selection(call):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = call.data.split('_')
        goal_type = parts[1]  # year –∏–ª–∏ quarter
        year = int(parts[2])
        quarter = int(parts[3]) if goal_type == 'quarter' else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_id = str(call.from_user.id)
        user_data[user_id] = {
            'setting_goal_for': {
                'type': goal_type,
                'year': year,
                'quarter': quarter
            }
        }
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
        period_text = f"{'–≤–µ—Å—å' if goal_type == 'year' else str(quarter) + '-–π –∫–≤–∞—Ä—Ç–∞–ª'} {year} –≥–æ–¥–∞"
        bot.edit_message_text(
            f"üéØ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –Ω–∞ {period_text}:",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(call.message, process_goal_km)
        
    except Exception as e:
        logger.error(f"Error in handle_goal_selection: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def process_goal_km(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞ –¥–ª—è —Ü–µ–ª–∏"""
    try:
        print(f"\n>>> Processing goal km: {message.text}")
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ–¥
        if user_id not in user_data or 'setting_goal_for' not in user_data[user_id]:
            print(">>> No year data found")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /setgoal")
            return
            
        year = user_data[user_id]['setting_goal_for']['year']
        print(f">>> Setting goal for year: {year}")
        
        try:
            goal_km = float(message.text.replace(',', '.'))
            if goal_km <= 0:
                raise ValueError
            print(f">>> Goal km value: {goal_km}")
        except ValueError:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤")
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
        challenge = Challenge(
            title=f"–õ–∏—á–Ω–∞—è —Ü–µ–ª—å –Ω–∞ {year} –≥–æ–¥",
            goal_km=goal_km,
            start_date=f"{year}-01-01",
            end_date=f"{year}-12-31",
            chat_id=str(message.chat.id),
            is_system=True,
            user_id=user_id  # –î–æ–±–∞–≤–ª—è–µ–º user_id –¥–ª—è —Å–≤—è–∑–∏
        )
        
        print(f">>> Created challenge object: {challenge.__dict__}")
        challenge.save()
        print(">>> Challenge saved")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del user_data[user_id]['setting_goal_for']
        
        bot.reply_to(
            message,
            f"‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üìÖ –ì–æ–¥: {year}\n"
            f"üéØ –¶–µ–ª—å: {goal_km:.1f} –∫–º",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
    except Exception as e:
        print(f">>> ERROR in process_goal_km: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏")

@bot.message_handler(commands=['checkgoal'])
def check_goal(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = str(message.from_user.id)
        user = User.get_by_id(user_id)
        
        if not user:
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
            
        year = datetime.now().year
        challenge = Challenge.get_user_challenge(user_id, year)
        
        if challenge:
            bot.reply_to(
                message,
                f"üéØ –í–∞—à–∞ —Ü–µ–ª—å –Ω–∞ {year} –≥–æ–¥: {challenge.goal_km} –∫–º\n"
                f"üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {user.get_yearly_progress(year):.1f} –∫–º"
            )
        else:
            bot.reply_to(
                message,
                f"‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å –Ω–∞ {year} –≥–æ–¥.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setgoal —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å."
            )
            
    except Exception as e:
        logger.error(f"Error in check_goal: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–∏")

@bot.message_handler(commands=['stats'])
def show_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = str(message.from_user.id)
        user = User.get_by_id(user_id)
        
        if not user:
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
            
        year = datetime.now().year
        month = datetime.now().month
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        yearly_stats = user.get_yearly_stats(year)
        monthly_stats = user.get_monthly_stats(year, month)
        best_stats = user.get_best_stats()
        recent_runs = user.get_recent_runs(limit=5)
        challenge = Challenge.get_user_challenge(user_id, year)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if challenge and challenge.goal_km and challenge.goal_km > 0:
            progress = (yearly_stats['total_km'] / challenge.goal_km * 100)
        else:
            progress = 0
        progress_bar = "‚ñà" * int(progress / 5) + "‚ñí" * (20 - int(progress / 5))
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–≥–∞ –¥–ª—è {user.username}\n\n"
            
            f"üéØ –ì–æ–¥–æ–≤–∞—è —Ü–µ–ª—å: {challenge.goal_km if challenge and challenge.goal_km else 0} –∫–º\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
            f"{progress_bar}\n\n"
            
            f"üìÖ {year} –≥–æ–¥:\n"
            f"‚îú –ü—Ä–æ–±–µ–∂–µ–∫: {yearly_stats['runs_count']}\n"
            f"‚îú –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {yearly_stats['total_km']:.1f} –∫–º\n"
            f"‚îî –°—Ä–µ–¥–Ω—è—è: {yearly_stats['avg_km']:.1f} –∫–º\n\n"
            
            f"üìÜ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n"
            f"‚îú –ü—Ä–æ–±–µ–∂–µ–∫: {monthly_stats['runs_count']}\n"
            f"‚îú –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {monthly_stats['total_km']:.1f} –∫–º\n"
            f"‚îî –°—Ä–µ–¥–Ω—è—è: {monthly_stats['avg_km']:.1f} –∫–º\n\n"
            
            f"üèÜ –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
            f"‚îú –õ—É—á—à–∞—è –ø—Ä–æ–±–µ–∂–∫–∞: {best_stats['best_run']:.1f} –∫–º\n"
            f"‚îú –í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {best_stats['total_runs']}\n"
            f"‚îî –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {best_stats['total_km']:.1f} –∫–º\n\n"
            
            f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏
        for run in recent_runs:
            stats_text += f"‚îî {run['date'].strftime('%Y-%m-%d')}: {run['distance_km']} –∫–º\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∞–∫—Ü–∏–∏
        stats_text += "\nüëç HD"
        
        bot.reply_to(message, stats_text)
        logger.debug(f"Detailed stats shown for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in show_stats: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏") 

@bot.message_handler(commands=['chatgoal', 'setchatgoal'])
def show_chat_goal(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—â–µ–π —Ü–µ–ª–∏ —á–∞—Ç–∞"""
    try:
        print(f"\n>>> Processing chat goal command: {message.text}")
        chat_id = str(message.chat.id)
        if chat_id.startswith('-100'):
            chat_id = chat_id[4:]
        year = datetime.now().year
        print(f">>> Chat ID (cleaned): {chat_id}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏
        if message.text.startswith('/setchatgoal'):
            bot.reply_to(message, "üéØ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –¥–ª—è —á–∞—Ç–∞ –Ω–∞ 2025 –≥–æ–¥:")
            bot.register_next_step_handler(message, process_chat_goal_km)
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        challenge = Challenge.get_chat_challenge(chat_id, year)
        print(f">>> Got challenge: {challenge.__dict__ if challenge else None}")
        
        if not challenge:
            bot.reply_to(message, "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±—â–∞—è —Ü–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        total_km = challenge.get_total_progress()
        participants_count = challenge.get_participants_count()
        print(f">>> Total km: {total_km}, Participants: {participants_count}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = (total_km / challenge.goal_km * 100) if challenge.goal_km > 0 else 0
        progress_bar = "‚ñà" * int(progress / 5) + "‚ñí" * (20 - int(progress / 5))
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –Ω–∞ {year} –≥–æ–¥:\n\n"
            f"üéØ –¶–µ–ª—å: {challenge.goal_km:.1f} –∫–º\n"
            f"üë• –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.1f} –∫–º\n"
            f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress:.1f}%\n"
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
        )
        
        bot.reply_to(message, stats_text)
        print(">>> Stats sent successfully")
        
    except Exception as e:
        print(f">>> ERROR in show_chat_goal: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞") 

def process_chat_goal_km(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞ –¥–ª—è —Ü–µ–ª–∏ —á–∞—Ç–∞"""
    try:
        print(f"\n>>> Processing chat goal value: {message.text}")
        chat_id = str(message.chat.id)
        if chat_id.startswith('-100'):
            chat_id = chat_id[4:]
        year = datetime.now().year
        print(f">>> Chat ID (cleaned): {chat_id}")
        
        try:
            goal_km = float(message.text.replace(',', '.'))
            if goal_km <= 0:
                raise ValueError
            print(f">>> Goal value: {goal_km}")
        except ValueError:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤")
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —á–∞—Ç–∞
        challenge = Challenge(
            title=f"–û–±—â–∞—è —Ü–µ–ª—å —á–∞—Ç–∞ –Ω–∞ {year} –≥–æ–¥",
            goal_km=goal_km,
            start_date=f"{year}-01-01",
            end_date=f"{year}-12-31",
            chat_id=chat_id,
            is_system=False  # –û–±—â–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏
        )
        
        print(f">>> Saving challenge: {challenge.__dict__}")
        challenge.save()
        print(">>> Challenge saved")
        
        total_km = challenge.get_total_progress()
        participants_count = challenge.get_participants_count()
        progress = (total_km / goal_km * 100) if goal_km > 0 else 0
        
        bot.reply_to(
            message,
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±—â–∞—è —Ü–µ–ª—å —á–∞—Ç–∞ –Ω–∞ {year} –≥–æ–¥!\n\n"
            f"üéØ –¶–µ–ª—å: {goal_km:.1f} –∫–º\n"
            f"üë• –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_km:.1f} –∫–º\n"
            f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress:.1f}%\n"
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n\n"
            f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏."
        )
            
    except Exception as e:
        print(f">>> ERROR in process_chat_goal_km: {str(e)}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏") 