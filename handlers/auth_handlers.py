from datetime import datetime, timedelta
import logging
from services.auth_code_service import AuthCodeService
from database.logger import logger

class AuthHandler:
    @staticmethod
    def register_handlers(bot):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("Starting auth handlers registration...")

        @bot.message_handler(commands=['link'])
        def cmd_link(message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
            try:
                user_id = str(message.from_user.id)
                code = AuthCodeService.create_auth_code(user_id)
                
                response = (
                    "üîó –ö–æ–¥ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
                    f"<code>{code}</code>\n\n"
                    "‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –±–æ—Ç—É"
                )
                
                bot.reply_to(message, response, parse_mode='HTML')
                logger.info(f"Auth code generated for user {user_id}")
                
            except Exception as e:
                logger.error(f"Error in cmd_link: {e}")
                bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        logger.info("Auth handlers registered successfully") 