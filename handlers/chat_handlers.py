from datetime import datetime
import traceback
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.models.challenge import Challenge
from database.models.user import User
from database.models.running_log import RunningLog
from utils.formatters import round_km
from database.base import get_db
from database.logger import logger
from sqlalchemy import func, extract

def register_chat_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞"""
    logger.info("Starting chat handlers registration...")

    def show_top(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –±–µ–≥—É–Ω–æ–≤ –≤ —á–∞—Ç–µ"""
        logger.info(f"Processing /top command. Message: {message.text}")
        logger.info(f"Chat type: {message.chat.type}, Chat ID: {message.chat.id}")
        try:
            if message.chat.type == 'private':
                logger.debug("Command /top rejected - private chat")
                bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
                return

            year = datetime.now().year
            
            logger.debug(f"Processing /top for year {year}")
            
            db = next(get_db())
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_stats = db.query(
                func.count(func.distinct(RunningLog.user_id)).label('total_users'),
                func.count().label('total_runs'),
                func.sum(RunningLog.km).label('total_distance')
            ).filter(
                extract('year', RunningLog.date_added) == year
            ).first()
            
            if not total_stats or not total_stats.total_distance:
                logger.debug("No running data found")
                bot.reply_to(message, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–µ–∂–∫–∞—Ö –≤ —ç—Ç–æ–º –≥–æ–¥—É")
                return

            total_users = total_stats.total_users
            total_runs = total_stats.total_runs
            total_distance = float(total_stats.total_distance)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            results = db.query(
                User.username,
                func.count().label('runs_count'),
                func.sum(RunningLog.km).label('total_km'),
                func.avg(RunningLog.km).label('avg_km'),
                func.max(RunningLog.km).label('best_run')
            ).join(
                User, RunningLog.user_id == User.user_id
            ).filter(
                extract('year', RunningLog.date_added) == year
            ).group_by(
                RunningLog.user_id, User.username
            ).order_by(
                func.sum(RunningLog.km).desc()
            ).limit(10).all()

            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
            max_km = max([float(r.total_km) for r in results]) if results else 0
            max_runs = max([r.runs_count for r in results]) if results else 0
            max_avg = max([float(r.avg_km) for r in results]) if results else 0

            response = (
                f"üèÉ‚Äç‚ôÇÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–≥—É–Ω–æ–≤ –∑–∞ {year} –≥–æ–¥</b>\n\n"
                f"üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                f"‚îú –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
                f"‚îú –í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫: {total_runs}\n"
                f"‚îî –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_distance:.2f} –∫–º\n\n"
                f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n"
            )
            
            for i, result in enumerate(results, 1):
                username = result.username
                runs_count = result.runs_count
                total_km = float(result.total_km)
                avg_km = float(result.avg_km)
                best_run = float(result.best_run)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
                km_percent = (total_km / max_km * 100)
                runs_percent = (runs_count / max_runs * 100)
                avg_percent = (avg_km / max_avg * 100)
                
                km_bar = "‚ñ∞" * int(km_percent/10) + "‚ñ±" * (10 - int(km_percent/10))
                runs_bar = "‚ñ∞" * int(runs_percent/10) + "‚ñ±" * (10 - int(runs_percent/10))
                avg_bar = "‚ñ∞" * int(avg_percent/10) + "‚ñ±" * (10 - int(avg_percent/10))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª—å –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                total_percent = (total_km / total_distance * 100)
                
                response += (
                    f"\n{medal} <b>{username}</b> ({total_percent:.1f}% –æ—Ç –æ–±—â–µ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏)\n"
                    f"‚îú –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_km:.2f} –∫–º\n"
                    f"‚îú {km_bar} {km_percent:.1f}%\n"
                    f"‚îú –ü—Ä–æ–±–µ–∂–∫–∏: {runs_count}\n"
                    f"‚îú {runs_bar} {runs_percent:.1f}%\n"
                    f"‚îú –°—Ä–µ–¥–Ω—è—è: {avg_km:.2f} –∫–º\n"
                    f"‚îú {avg_bar} {avg_percent:.1f}%\n"
                    f"‚îî –õ—É—á—à–∞—è: {best_run:.2f} –∫–º\n"
                )

            bot.reply_to(message, response, parse_mode='HTML')
            logger.info("Top runners shown")
            
        except Exception as e:
            logger.error(f"Error in show_top: {e}")
            logger.error(f"Full traceback: {traceback.format_exc()}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.message_handler(commands=['top'])(show_top)
    logger.info("Chat handlers registered successfully")