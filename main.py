import os
import sys
import re
import traceback
import calendar
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)

# –ò–º–ø–æ—Ä—Ç—ã
from bot_instance import bot
from database.base import Base, engine, SessionLocal
from database.logger import logger
from database.models.user import User
from database.models.running_log import RunningLog

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers.chat_handlers import register_chat_handlers
from handlers.challenge_handlers import register_handlers as register_challenge_handlers
from handlers.team_handlers import register_handlers as register_team_handlers
from handlers.stats_handlers import register_handlers as register_stats_handlers
from handlers.goal_handlers import register_handlers as register_goal_handlers
from handlers.base_handler import BaseHandler
from handlers.chat_goal_handlers import register_handlers as register_chat_goal_handlers
from handlers.reset_handlers import ResetHandler
from handlers.admin_handlers import AdminHandler
from handlers.donate_handlers import DonateHandler
from handlers import message_handlers, private_handlers

class MessageHandler(BaseHandler):
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info("Registering message handlers")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot.register_message_handler(
            self.handle_message,
            content_types=['text'],
            func=lambda message: not message.text.startswith('/')
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
        self.bot.register_message_handler(
            self.handle_photo_run,
            content_types=['photo']
        )
        
        self.logger.info("Message handlers registered successfully")

    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info(f"Processing message: {message.text}")
        self.logger.info(f"Chat type: {message.chat.type}, Chat ID: {message.chat.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            km_str = message.text.split()[0].replace(',', '.')
            km = float(km_str)
            
            self.logger.info(f"Extracted distance: {km} km")
            
            if km <= 0:
                self.logger.warning(f"Invalid distance: {km} km")
                self.bot.reply_to(
                    message,
                    "‚ö†Ô∏è *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤",
                    parse_mode='Markdown'
                )
                return
                
            user_id = str(message.from_user.id)
            chat_id = str(message.chat.id)
            chat_type = message.chat.type
            
            self.logger.info(f"User ID: {user_id}, Chat ID: {chat_id}, Chat Type: {chat_type}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.get_by_id(user_id)
            self.logger.debug(f"Found user: {user}")
            
            if not user:
                username = message.from_user.username or message.from_user.first_name
                self.logger.info(f"Creating new user: {username}")
                user = User.create(user_id=user_id, username=username)
                self.logger.info(f"Created new user: {username} ({user_id})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–µ–∂–∫–µ
            self.logger.info(f"Adding run entry: {km} km")
            success = RunningLog.add_entry(
                user_id=user_id,
                km=km,
                date_added=datetime.now().date(),
                notes=message.text,
                chat_id=chat_id,
                chat_type=chat_type
            )
            
            if success:
                self.logger.info("Run entry added successfully")
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_km = RunningLog.get_user_total_km(user_id)
                self.logger.debug(f"Total km: {total_km}")
                
                current_year = datetime.now().year
                current_month = datetime.now().month
                
                year_stats = RunningLog.get_user_stats(user_id, current_year)
                self.logger.debug(f"Year stats: {year_stats}")
                
                month_stats = RunningLog.get_user_stats(user_id, current_year, current_month)
                self.logger.debug(f"Month stats: {month_stats}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≥–æ–¥–æ–≤–æ–π —Ü–µ–ª–∏
                if user.goal_km and user.goal_km > 0:
                    progress = (total_km / user.goal_km * 100)
                    progress_bar = "‚ñà" * int(progress / 5) + "‚ñë" * (20 - int(progress / 5))
                    remaining = user.goal_km - total_km
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = (
                    f"üéâ *–ù–æ–≤–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!*\n"
                    f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                    f"‚îÇ üìç {km:.1f} –∫–º\n"
                    f"‚îÇ üìÖ {datetime.now().strftime('%d.%m.%Y')}\n"
                    f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n"
                    
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {calendar.month_name[datetime.now().month]}:*\n"
                    f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                    f"‚îÇ üèÉ {month_stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                    f"‚îÇ üìè {month_stats['total_km']:.1f} –∫–º –≤—Å–µ–≥–æ\n"
                    f"‚îÇ ‚åÄ {month_stats['avg_km']:.1f} –∫–º –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
                    f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n"
                    
                    f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {datetime.now().year}:*\n"
                    f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                    f"‚îÇ üèÉ {year_stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                    f"‚îÇ üìè {year_stats['total_km']:.1f} –∫–º –≤—Å–µ–≥–æ\n"
                    f"‚îÇ ‚åÄ {year_stats['avg_km']:.1f} –∫–º –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
                    f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–¥–æ–≤–æ–π —Ü–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                if user.goal_km and user.goal_km > 0:
                    response += (
                        f"\n\nüéØ *–ì–æ–¥–æ–≤–∞—è —Ü–µ–ª—å:*\n"
                        f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                        f"‚îÇ üé™ {user.goal_km:.0f} –∫–º\n"
                        f"‚îÇ ‚ñ∏ {progress_bar} {progress:.1f}%\n"
                        f"‚îÇ üìç –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –∫–º\n"
                        f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
                    )
                else:
                    response += (
                        f"\n\nüí° *–°–æ–≤–µ—Ç:*\n"
                        f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                        f"‚îÇ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ–¥–æ–≤—É—é —Ü–µ–ª—å\n"
                        f"‚îÇ –∫–æ–º–∞–Ω–¥–æ–π /setgoal\n"
                        f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if km > 10:
                    response += "\n\nüî• –û—Ç–ª–∏—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞!"
                elif km > 5:
                    response += "\n\nüí™ –•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!"
                else:
                    response += "\n\nüëç –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
                
                self.bot.reply_to(message, response, parse_mode='Markdown')
                self.logger.info(f"Logged run: {km}km for user {user_id}")
            else:
                self.logger.error(f"Failed to save run for user {user_id}")
                error_message = (
                    "‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )
                self.bot.reply_to(message, error_message, parse_mode='Markdown')
            return
                
        except ValueError:
            self.logger.warning(f"Invalid message format: {message.text}")
            self.bot.reply_to(
                message,
                "‚ö†Ô∏è *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n\n"
                "–ü—Ä–∏–º–µ—Ä: `5.2` –∏–ª–∏ `5,2`",
                parse_mode='Markdown'
            )
            return
        except Exception as e:
            self.logger.error(f"Error saving run: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            error_message = (
                "üòî *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
            self.bot.reply_to(message, error_message, parse_mode='Markdown')
            return
            
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ
        if message.chat.type == 'private':
            help_message = (
                "*üìù –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–µ–∂–∫—É:*\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "*1.* –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂:\n"
                "‚Ä¢ –ü—Ä–∏–º–µ—Ä: `5.2`\n\n"
                "*2.* –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n"
                "‚Ä¢ –ü—Ä–∏–º–µ—Ä: `5.2 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞`\n\n"
                "*3.* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:\n"
                "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫ —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç —Å –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–µ–º\n\n"
                "üîç –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /help"
            )
            self.bot.reply_to(message, help_message, parse_mode='Markdown')

    def handle_photo_run(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é"""
        self.logger.info(f"Processing photo message with caption: {message.caption}")
        self.logger.info(f"Chat type: {message.chat.type}, Chat ID: {message.chat.id}")
        
        if not message.caption:
            self.logger.warning("No caption provided with photo")
            self.bot.reply_to(
                message,
                "‚ö†Ô∏è *–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–µ–º*\n\n"
                "–ü—Ä–∏–º–µ—Ä: `5.2` –∏–ª–∏ `5.2 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞`",
                parse_mode='Markdown'
            )
            return
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ –ø–æ–¥–ø–∏—Å–∏
            km_str = message.caption.split()[0].replace(',', '.')
            km = float(km_str)
            
            self.logger.info(f"Extracted distance from caption: {km} km")
            
            if km <= 0:
                self.logger.warning(f"Invalid distance: {km} km")
                self.bot.reply_to(
                    message,
                    "‚ö†Ô∏è *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤",
                    parse_mode='Markdown'
                )
                return
                
            user_id = str(message.from_user.id)
            chat_id = str(message.chat.id)
            chat_type = message.chat.type
            
            self.logger.info(f"User ID: {user_id}, Chat ID: {chat_id}, Chat Type: {chat_type}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.get_by_id(user_id)
            self.logger.debug(f"Found user: {user}")
            
            if not user:
                username = message.from_user.username or message.from_user.first_name
                self.logger.info(f"Creating new user: {username}")
                user = User.create(user_id=user_id, username=username)
                self.logger.info(f"Created new user: {username} ({user_id})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–±–µ–∂–∫–µ
            self.logger.info(f"Adding run entry with photo: {km} km")
            success = RunningLog.add_entry(
                user_id=user_id,
                km=km,
                date_added=datetime.now().date(),
                notes=message.caption,
                chat_id=chat_id,
                chat_type=chat_type
            )
            
            if success:
                self.logger.info("Run entry with photo added successfully")
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_km = RunningLog.get_user_total_km(user_id)
                self.logger.debug(f"Total km: {total_km}")
                
                current_year = datetime.now().year
                current_month = datetime.now().month
                
                year_stats = RunningLog.get_user_stats(user_id, current_year)
                self.logger.debug(f"Year stats: {year_stats}")
                
                month_stats = RunningLog.get_user_stats(user_id, current_year, current_month)
                self.logger.debug(f"Month stats: {month_stats}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≥–æ–¥–æ–≤–æ–π —Ü–µ–ª–∏
                if user.goal_km and user.goal_km > 0:
                    progress = (total_km / user.goal_km * 100)
                    progress_bar = "‚ñà" * int(progress / 5) + "‚ñë" * (20 - int(progress / 5))
                    remaining = user.goal_km - total_km
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = (
                    f"üéâ *–ü—Ä–æ–±–µ–∂–∫–∞ —Å —Ñ–æ—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–∞!*\n"
                    f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                    f"‚îÇ üìç {km:.1f} –∫–º\n"
                    f"‚îÇ üìÖ {datetime.now().strftime('%d.%m.%Y')}\n"
                    f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n"
                    
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {calendar.month_name[datetime.now().month]}:*\n"
                    f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                    f"‚îÇ üèÉ {month_stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                    f"‚îÇ üìè {month_stats['total_km']:.1f} –∫–º –≤—Å–µ–≥–æ\n"
                    f"‚îÇ ‚åÄ {month_stats['avg_km']:.1f} –∫–º –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
                    f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n"
                    
                    f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {datetime.now().year}:*\n"
                    f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                    f"‚îÇ üèÉ {year_stats['runs_count']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                    f"‚îÇ üìè {year_stats['total_km']:.1f} –∫–º –≤—Å–µ–≥–æ\n"
                    f"‚îÇ ‚åÄ {year_stats['avg_km']:.1f} –∫–º –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
                    f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–¥–æ–≤–æ–π —Ü–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                if user.goal_km and user.goal_km > 0:
                    response += (
                        f"\n\nüéØ *–ì–æ–¥–æ–≤–∞—è —Ü–µ–ª—å:*\n"
                        f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                        f"‚îÇ üé™ {user.goal_km:.0f} –∫–º\n"
                        f"‚îÇ ‚ñ∏ {progress_bar} {progress:.1f}%\n"
                        f"‚îÇ üìç –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} –∫–º\n"
                        f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
                    )
                else:
                    response += (
                        f"\n\nüí° *–°–æ–≤–µ—Ç:*\n"
                        f"‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n"
                        f"‚îÇ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ–¥–æ–≤—É—é —Ü–µ–ª—å\n"
                        f"‚îÇ –∫–æ–º–∞–Ω–¥–æ–π /setgoal\n"
                        f"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ"
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if km > 10:
                    response += "\n\nüî• –û—Ç–ª–∏—á–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞!"
                elif km > 5:
                    response += "\n\nüí™ –•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!"
                else:
                    response += "\n\nüëç –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
                
                self.bot.reply_to(message, response, parse_mode='Markdown')
                self.logger.info(f"Logged run with photo: {km}km for user {user_id}")
            else:
                self.logger.error(f"Failed to save run with photo for user {user_id}")
                error_message = (
                    "‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–µ–∂–∫—É*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )
                self.bot.reply_to(message, error_message, parse_mode='Markdown')
            return
                
        except ValueError:
            self.logger.warning(f"Invalid caption format: {message.caption}")
            self.bot.reply_to(
                message,
                "‚ö†Ô∏è *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞*\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é\n"
                "–ü—Ä–∏–º–µ—Ä: `5.2` –∏–ª–∏ `5,2`",
                parse_mode='Markdown'
            )
        except Exception as e:
            self.logger.error(f"Error in handle_photo_run: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            error_message = (
                "üòî *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
            self.bot.reply_to(message, error_message, parse_mode='Markdown')

    def handle_profile(self, message: Message, user_id=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.log_message(message, "profile")
        try:
            # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            if user_id is None:
                user_id = str(message.from_user.id)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = db.query(User).filter(User.user_id == user_id).first()
                if not user:
                    username = message.from_user.username or message.from_user.first_name
                    user = User(user_id=user_id, username=username)
                    db.add(user)
                    db.commit()
                
                current_year = datetime.now().year
                current_month = datetime.now().month
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                year_stats = RunningLog.get_user_stats(user_id, current_year, db=db)
                month_stats = RunningLog.get_user_stats(user_id, current_year, current_month, db=db)
                best_stats = RunningLog.get_best_stats(user_id, db=db)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                response = f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å {user.username}</b>\n\n"
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
                if user.goal_km > 0:
                    progress = (year_stats['total_km'] / user.goal_km * 100)
                    progress_bar = self._generate_progress_bar(progress)
                    response += f"üéØ –¶–µ–ª—å –Ω–∞ {current_year}: {user.goal_km:.2f} –∫–º\n"
                    response += f"{progress_bar} {progress:.2f}%\n"
                    response += f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ: {year_stats['total_km']:.2f} –∫–º\n"
                    response += f"‚≠êÔ∏è –û—Å—Ç–∞–ª–æ—Å—å: {user.goal_km - year_stats['total_km']:.2f} –∫–º\n\n"
                else:
                    response += "üéØ –¶–µ–ª—å –Ω–∞ –≥–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                month_name = calendar.month_name[current_month]
                response += f"üìÖ <b>{month_name}</b>\n"
                response += f"‚îú –ü—Ä–æ–±–µ–∂–µ–∫: {month_stats['runs_count']}\n"
                response += f"‚îú –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {month_stats['total_km']:.2f} –∫–º\n"
                if month_stats['runs_count'] > 0:
                    response += f"‚îî –°—Ä–µ–¥–Ω—è—è: {month_stats['avg_km']:.2f} –∫–º\n\n"
                else:
                    response += f"‚îî –°—Ä–µ–¥–Ω—è—è: 0.0 –∫–º\n\n"
                
                # –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                response += f"üèÜ <b>–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n"
                response += f"‚îú –ü—Ä–æ–±–µ–∂–∫–∞: {best_stats['best_run']:.2f} –∫–º\n"
                response += f"‚îî –í—Å–µ–≥–æ: {best_stats['total_runs']} –ø—Ä–æ–±–µ–∂–µ–∫\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = InlineKeyboardMarkup()
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                markup.row(
                    InlineKeyboardButton("üìù –ù–æ–≤–∞—è –ø—Ä–æ–±–µ–∂–∫–∞", callback_data="new_run"),
                    InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data="set_goal_custom")
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                markup.row(
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_detailed_stats"),
                    InlineKeyboardButton("‚úèÔ∏è –ò—Å—Ç–æ—Ä–∏—è", callback_data="edit_runs")
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if hasattr(message, 'message_id'):
                    # –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=message.message_id,
                        text=response,
                        reply_markup=markup,
                        parse_mode='HTML'
                    )
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    self.bot.reply_to(message, response, reply_markup=markup, parse_mode='HTML')
                    
            finally:
                db.close()
            
        except Exception as e:
            self.logger.error(f"Error in handle_profile: {e}")
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    def _generate_progress_bar(self, percentage, length=10):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
        filled = int(percentage / (100 / length))
        empty = length - filled
        return '‚ñì' * filled + '‚ñë' * empty

@bot.message_handler(commands=['start'])
def start_handler(message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    try:
        user_id = str(message.from_user.id)
        username = message.from_user.username or message.from_user.first_name
        
        user = User.get_by_id(user_id)
        if not user:
            user = User.create(user_id=user_id, username=username)
            logger.info(f"Created new user: {username} ({user_id})")
        
        welcome_message = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n"
            "üéØ *RunTracker* –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π:\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "*1. –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–∂–∫–∏*\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é: `5.2`\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: `5.2 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞`\n"
            "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
            "*2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å*\n"
            "‚Ä¢ /stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä\n"
            "‚Ä¢ /history - –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–±–µ–∂–µ–∫ üìÖ\n"
            "‚Ä¢ /mystats - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ üìà\n\n"
            "*3. –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å*\n"
            "‚Ä¢ /top - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ üèÜ\n"
            "‚Ä¢ /challenges - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö üéØ\n"
            "‚Ä¢ /createteam - —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É üë•\n\n"
            "üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "‚ö°Ô∏è –°–æ–≤–µ—Ç: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ–¥–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /setgoal"
        )
        
        bot.reply_to(message, welcome_message, parse_mode='Markdown')
        logger.info(f"Sent welcome message to user {user_id}")
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        logger.error(f"Full traceback: {traceback.format_exc()}")
        error_message = (
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        bot.reply_to(message, error_message)

@bot.message_handler(commands=['help'])
def help_handler(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = (
        "*ü§ñ –ö–æ–º–∞–Ω–¥—ã RunTracker*\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑*\n"
        "‚Ä¢ /stats - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
        "‚Ä¢ /mystats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /history - –≤–∞—à–∏ –ø—Ä–æ–±–µ–∂–∫–∏\n"
        "‚Ä¢ /top - —Ä–µ–π—Ç–∏–Ω–≥ –±–µ–≥—É–Ω–æ–≤\n\n"
        "*üéØ –¶–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n"
        "‚Ä¢ /setgoal `<–∫–º>` - –≥–æ–¥–æ–≤–∞—è —Ü–µ–ª—å\n"
        "‚Ä¢ /progress - —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "*üìù –ó–∞–ø–∏—Å—å –ø—Ä–æ–±–µ–∂–µ–∫*\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: `5.2`\n"
        "‚Ä¢ –° –æ–ø–∏—Å–∞–Ω–∏–µ–º: `5.2 –ü–∞—Ä–∫–æ–≤–∞—è –ø—Ä–æ–±–µ–∂–∫–∞`\n"
        "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏\n\n"
        "*üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂–∏*\n"
        "‚Ä¢ /challenges - –∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n"
        "‚Ä¢ /mychallenges - –≤–∞—à–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n"
        "‚Ä¢ /joinchallenge `<ID>` - —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å\n"
        "‚Ä¢ /leavechallenge `<ID>` - –ø–æ–∫–∏–Ω—É—Ç—å\n\n"
        "*üë• –ö–æ–º–∞–Ω–¥—ã*\n"
        "‚Ä¢ /createteam `<–Ω–∞–∑–≤–∞–Ω–∏–µ>` - —Å–æ–∑–¥–∞—Ç—å\n"
        "‚Ä¢ /jointeam `<ID>` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        "‚Ä¢ /teamstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "üí° –°–æ–≤–µ—Ç: –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
    )
    
    bot.reply_to(message, help_text, parse_mode='Markdown')
    logger.info(f"Sent help message to user {message.from_user.id}")

def register_message_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    handler = MessageHandler(bot)
    handler.register()

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    message_handlers.register_handlers(bot)
    private_handlers.register_handlers(bot)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Base.metadata.create_all(engine)
        logger.info("Database tables created")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_message_handlers(bot)
        register_chat_handlers(bot)
        register_challenge_handlers(bot)
        register_team_handlers(bot)
        register_stats_handlers(bot)
        register_goal_handlers(bot)
        register_chat_goal_handlers(bot)
        AdminHandler(bot).register()
        ResetHandler(bot).register()
        DonateHandler(bot).register()
        
        logger.info("Bot handlers registered")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Bot is running...")
        bot.infinity_polling()
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        logger.error(f"Full traceback: {traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
   main()