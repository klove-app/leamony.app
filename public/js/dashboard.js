import { checkAuth, logout, getRuns, viewLogs } from './api.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞
function addLog(message, type = '', container = 'dataInfo') {
    const logElement = document.getElementById(container);
    if (logElement) {
        logElement.innerHTML = message;
        logElement.className = `log-entry ${type}`;
        logElement.style.display = 'block';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showError(message) {
    const errorLog = document.getElementById('errorLog');
    if (errorLog) {
        errorLog.textContent = message;
        errorLog.style.display = 'block';
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            errorLog.style.display = 'none';
        }, 5000);
    }
}

function updateProgressSection(totalDistance, yearlyGoal) {
    const progressSection = document.getElementById('progressSection');
    if (yearlyGoal > 0) {
        const percentage = Math.min((totalDistance / yearlyGoal) * 100, 100);
        progressSection.innerHTML = `
            <div class="progress-info">
                <span class="progress-label">–¶–µ–ª—å –Ω–∞ –≥–æ–¥: ${yearlyGoal} –∫–º</span>
                <span class="progress-value">${percentage.toFixed(1)}%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${percentage}%"></div>
            </div>
        `;
    } else {
        progressSection.style.display = 'none';
    }
}

function updateMetrics(totalDistance, avgDistance, totalRuns) {
    document.querySelector('#totalDistanceCard .metric-value').textContent = `${totalDistance.toFixed(1)} –∫–º`;
    document.querySelector('#avgDistanceCard .metric-value').textContent = `${avgDistance.toFixed(1)} –∫–º`;
    document.querySelector('#totalRunsCard .metric-value').textContent = totalRuns;
}

function updateRunsTable(runs) {
    const tbody = document.getElementById('runsTableBody');
    tbody.innerHTML = runs.slice(0, 5).map(run => `
        <tr class="animate-fade-in">
            <td>${new Date(run.date_added).toLocaleDateString()}</td>
            <td class="distance">${run.km.toFixed(1)}</td>
            <td class="time">${run.duration || '-'}</td>
            <td class="notes">${run.notes || ''}</td>
        </tr>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData(forceCheck = false) {
    try {
        console.group('Loading user data...');
        
        const user = await checkAuth(forceCheck);
        if (!user) {
            window.location.href = '/';
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        document.getElementById('welcomeMessage').textContent = `–ü—Ä–∏–≤–µ—Ç, ${user.username}! üëã`;

        const now = new Date();
        const startDate = new Date(now.getFullYear(), 0, 1).toISOString().split('T')[0];
        const endDate = now.toISOString().split('T')[0];
        const runs = await getRuns(startDate, endDate);
        
        if (runs && runs.length > 0) {
            const totalDistance = runs.reduce((sum, run) => sum + run.km, 0);
            const yearlyGoal = user.goal_km || 0;
            const avgDistance = totalDistance / runs.length;
            const lastRun = new Date(runs[0].date_added);
            const daysSinceLastRun = Math.floor((now - lastRun) / (1000 * 60 * 60 * 24));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–±–µ–∂–∫–µ
            document.getElementById('lastRunInfo').textContent = daysSinceLastRun === 0 
                ? '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ —Å–µ–≥–æ–¥–Ω—è!'
                : `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞: ${daysSinceLastRun} –¥–Ω. –Ω–∞–∑–∞–¥`;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
            updateProgressSection(totalDistance, yearlyGoal);
            updateMetrics(totalDistance, avgDistance, runs.length);
            updateRunsTable(runs);

            addLog(`
                <div class="dashboard-content animate-fade-in">
                    <header class="dashboard-header">
                        <div class="user-welcome">
                            <h2>–ü—Ä–∏–≤–µ—Ç, ${user.username}! üëã</h2>
                            ${daysSinceLastRun === 0 ? 
                                '<span class="last-run">–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ —Å–µ–≥–æ–¥–Ω—è!</span>' : 
                                `<span class="last-run">–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞: ${daysSinceLastRun} –¥–Ω. –Ω–∞–∑–∞–¥</span>`
                            }
                        </div>
                        <div class="period-selector">
                            <button class="active">–ì–æ–¥</button>
                            <button>–ú–µ—Å—è—Ü</button>
                            <button>–ù–µ–¥–µ–ª—è</button>
                        </div>
                    </header>

                    ${yearlyGoal > 0 ? `
                        <div class="progress-section animate-slide-in">
                            <div class="progress-info">
                                <span class="progress-label">–¶–µ–ª—å –Ω–∞ –≥–æ–¥: ${yearlyGoal} –∫–º</span>
                                <span class="progress-value">${((totalDistance / yearlyGoal) * 100).toFixed(1)}%</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${Math.min((totalDistance / yearlyGoal) * 100, 100)}%"></div>
                            </div>
                        </div>
                    ` : ''}

                    <div class="metrics-grid animate-slide-in">
                        <div class="metric-card">
                            <div class="metric-value">${totalDistance.toFixed(1)} –∫–º</div>
                            <div class="metric-label">–ü—Ä–æ–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–º –≥–æ–¥—É</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-value">${avgDistance.toFixed(1)} –∫–º</div>
                            <div class="metric-label">–°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-value">${runs.length}</div>
                            <div class="metric-label">–í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫</div>
                        </div>
                    </div>

                    <div class="recent-runs animate-slide-in">
                        <div class="section-header">
                            <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏</h3>
                            <button class="view-all">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ</button>
                        </div>
                        <table class="runs-table">
                            <thead>
                                <tr>
                                    <th>–î–∞—Ç–∞</th>
                                    <th>–ö–º</th>
                                    <th>–ú–∏–Ω</th>
                                    <th>–ó–∞–º–µ—Ç–∫–∏</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${runs.slice(0, 5).map(run => `
                                    <tr class="animate-fade-in">
                                        <td>${new Date(run.date_added).toLocaleDateString()}</td>
                                        <td class="distance">${run.km.toFixed(1)}</td>
                                        <td class="time">${run.duration || '-'}</td>
                                        <td class="notes">${run.notes || ''}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>

                    <div class="action-buttons animate-slide-in">
                        <button class="sync-button">
                            <span class="button-icon">üîÑ</span>
                            –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Telegram
                        </button>
                        <button class="export-button">
                            <span class="button-icon">üìä</span>
                            –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                        </button>
                    </div>
                </div>
            `, 'success', 'dataInfo');
        } else {
            addLog(`
                <div class="dashboard-content animate-fade-in">
                    <div class="empty-state">
                        <h2>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫</h2>
                        <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö –ø—Ä–æ–±–µ–∂–∫–∞—Ö</p>
                        <button class="sync-button">
                            <span class="button-icon">üîÑ</span>
                            –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Telegram
                        </button>
                    </div>
                </div>
            `, 'info', 'dataInfo');
        }
        
        console.groupEnd();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        console.groupEnd();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
async function handleLogout() {
    try {
        console.group('Handle Logout Process');
        console.log('1. –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã—Ö–æ–¥–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const user = await checkAuth(true);
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            window.location.href = '/';
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        const cookies = document.cookie.split(';');
        console.log('2. –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º:', cookies);
        
        console.log('3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é logout');
        const result = await logout();
        console.log('4. –†–µ–∑—É–ª—å—Ç–∞—Ç logout:', result);
        
        console.log('5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞:', document.cookie);
        
        console.log('6. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        console.groupEnd();
        
        window.location.href = '/';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        console.groupEnd();
        window.location.href = '/';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    await loadUserData(false);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const logoutButton = document.getElementById('logoutButton');
    if (logoutButton) {
        logoutButton.addEventListener('click', handleLogout);
    }

    const refreshButton = document.getElementById('refreshButton');
    if (refreshButton) {
        // –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–µ–ª–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        refreshButton.addEventListener('click', () => loadUserData(true));
    }

    const syncButton = document.getElementById('syncButton');
    if (syncButton) {
        syncButton.addEventListener('click', () => {
            window.open('https://t.me/sl_run_bot', '_blank');
        });
    }

    const exportButton = document.getElementById('exportButton');
    if (exportButton) {
        exportButton.addEventListener('click', () => {
            showError('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    const viewLogsButton = document.createElement('button');
    viewLogsButton.textContent = '–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤';
    viewLogsButton.style.marginLeft = '10px';
    viewLogsButton.style.padding = '5px 10px';
    viewLogsButton.style.backgroundColor = '#4CAF50';
    viewLogsButton.style.color = 'white';
    viewLogsButton.style.border = 'none';
    viewLogsButton.style.borderRadius = '3px';
    viewLogsButton.style.cursor = 'pointer';
    
    viewLogsButton.onclick = viewLogs;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞
    if (logoutButton && logoutButton.parentNode) {
        logoutButton.parentNode.insertBefore(viewLogsButton, logoutButton.nextSibling);
    }
}); 