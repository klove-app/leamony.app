let currentPeriod = 'year';

document.addEventListener('DOMContentLoaded', initDashboard);

async function initDashboard() {
    console.group('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞');
    try {
        await checkAuth();
        initializeTabs();
        setupEventListeners();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        window.location.href = '/';
    }
    console.groupEnd();
}

function getPeriodDates(period) {
    const now = new Date();
    let startDate;
    
    switch(period) {
        case 'week':
            startDate = new Date(now);
            startDate.setDate(now.getDate() - 7);
            break;
        case 'month':
            startDate = new Date(now.getFullYear(), now.getMonth(), 1);
            break;
        case 'year':
        default:
            startDate = new Date(now.getFullYear(), 0, 1);
            break;
    }
    
    return {
        startDate: startDate.toISOString().split('T')[0],
        endDate: now.toISOString().split('T')[0]
    };
}

async function updatePeriod(period) {
    const periodButtons = document.querySelectorAll('.period-button');
    periodButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.period === period);
    });
    currentPeriod = period;
    await loadUserData(false);
}

function createBaseStructure() {
    return `
        <div class="welcome-message"></div>
        <div class="period-selector">
            <button class="period-button" data-period="week">–ù–µ–¥–µ–ª—è</button>
            <button class="period-button" data-period="month">–ú–µ—Å—è—Ü</button>
            <button class="period-button active" data-period="year">–ì–æ–¥</button>
        </div>
        <div class="metrics-grid">
            <div class="metric-card">
                <h3>–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è</h3>
                <div class="metric-value">0 –∫–º</div>
            </div>
            <div class="metric-card">
                <h3>–°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è</h3>
                <div class="metric-value">0 –∫–º</div>
            </div>
            <div class="metric-card">
                <h3>–í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫</h3>
                <div class="metric-value">0</div>
            </div>
        </div>
        <div class="recent-runs">
            <h3>–ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>–î–ê–¢–ê</th>
                            <th>–î–ò–°–¢–ê–ù–¶–ò–Ø (–ö–ú)</th>
                            <th>–í–†–ï–ú–Ø</th>
                            <th>–ó–ê–ú–ï–¢–ö–ò</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        <div class="all-runs">
            <h3>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–±–µ–∂–µ–∫</h3>
            <div class="months-container"></div>
        </div>
        <div class="action-buttons">
            <button id="refreshButton" class="action-button">
                <span class="button-icon">üîÑ</span> –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>
            <button id="viewLogsButton" class="action-button">
                <span class="button-icon">üìã</span> –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
            </button>
            <button id="exportButton" class="action-button">
                <span class="button-icon">üìä</span> –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            </button>
        </div>
    `;
}

function initializeTabs() {
    console.group('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫');
    
    const mainContent = document.querySelector('.dashboard-content');
    if (!mainContent) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        console.groupEnd();
        return;
    }

    mainContent.innerHTML = '';

    const tabNavigation = document.createElement('div');
    tabNavigation.className = 'tab-navigation';
    tabNavigation.innerHTML = `
        <button class="tab-button active" data-tab="current">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</button>
        <button class="tab-button" data-tab="training">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω</button>
    `;

    const tabContainers = document.createElement('div');
    tabContainers.className = 'tab-containers';
    tabContainers.innerHTML = `
        <div id="currentTab" class="tab-content active"></div>
        <div id="trainingTab" class="tab-content"></div>
    `;

    mainContent.appendChild(tabNavigation);
    mainContent.appendChild(tabContainers);

    const currentTab = document.getElementById('currentTab');
    currentTab.innerHTML = createBaseStructure();

    setupEventListeners();
    loadUserData();

    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.groupEnd();
}

function setupEventListeners() {
    console.group('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');

    const currentTab = document.getElementById('currentTab');
    if (!currentTab) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        console.groupEnd();
        return;
    }

    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(button => {
        button.addEventListener('click', () => switchTab(button.dataset.tab));
    });

    const periodButtons = currentTab.querySelectorAll('.period-button');
    periodButtons.forEach(button => {
        button.addEventListener('click', () => updatePeriod(button.dataset.period));
    });

    const refreshButton = currentTab.querySelector('#refreshButton');
    if (refreshButton) {
        refreshButton.addEventListener('click', () => loadUserData(true));
    }

    const viewLogsButton = currentTab.querySelector('#viewLogsButton');
    if (viewLogsButton) {
        viewLogsButton.addEventListener('click', viewLogs);
    }

    const exportButton = currentTab.querySelector('#exportButton');
    if (exportButton) {
        exportButton.addEventListener('click', () => {
            showError('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
    }

    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.groupEnd();
}

async function switchTab(tabName) {
    console.group('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    try {
        const buttons = document.querySelectorAll('.tab-button');
        buttons.forEach(button => {
            button.classList.toggle('active', button.dataset.tab === tabName);
        });

        const tabs = document.querySelectorAll('.tab-content');
        tabs.forEach(tab => {
            tab.classList.toggle('active', tab.id === `${tabName}Tab`);
        });

        if (tabName === 'training') {
            const trainingTab = document.getElementById('trainingTab');
            if (trainingTab && !trainingTab.querySelector('.training-plan-form')) {
                console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
                new TrainingPlanForm(trainingTab);
            }
        } else if (tabName === 'current') {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
            await loadUserData();
        }

        console.log('–í–∫–ª–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏');
    }

    console.groupEnd();
}

async function loadUserData(forceCheck = false) {
    try {
        console.group('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        const user = await checkAuth(forceCheck);
        if (!user) {
            window.location.href = '/';
            return;
        }

        const { startDate, endDate } = getPeriodDates(currentPeriod);
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥:', { startDate, endDate });

        const response = await getRuns(startDate, endDate);
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response);
        
        const runs = Array.isArray(response) ? response : [];
        console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–∂–∫–∏:', runs);

        const data = {
            welcomeMessage: `–ü—Ä–∏–≤–µ—Ç, ${user.username}! üëã`,
            stats: calculateStats(runs),
            recentRuns: runs.slice(0, 5),
            runs: runs
        };

        updateDashboard(data);

        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    } finally {
        console.groupEnd();
    }
}

function calculateStats(runs) {
    if (!runs || runs.length === 0) {
        return {
            totalDistance: 0,
            avgDistance: 0,
            totalRuns: 0
        };
    }

    const totalDistance = runs.reduce((sum, run) => sum + parseFloat(run.km || 0), 0);
    const avgDistance = totalDistance / runs.length;

    return {
        totalDistance: totalDistance.toFixed(1),
        avgDistance: avgDistance.toFixed(1),
        totalRuns: runs.length
    };
}

function updateDashboard(data) {
    console.group('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞');
    
    try {
        const currentTab = document.getElementById('currentTab');
        if (!currentTab) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
            return;
        }

        const welcomeMessage = currentTab.querySelector('.welcome-message');
        if (welcomeMessage) {
            welcomeMessage.textContent = data.welcomeMessage;
        }

        if (data.stats) {
            updateMetrics(data.stats);
        }

        if (data.recentRuns) {
            updateRecentRuns(data.recentRuns);
        }

        if (data.runs) {
            updateMonthlyRuns(data.runs);
        }

        console.log('–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }

    console.groupEnd();
}

function updateMetrics(stats) {
    console.group('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫');
    
    try {
        const metricCards = document.querySelectorAll('.metric-card .metric-value');
        if (metricCards.length >= 3) {
            metricCards[0].textContent = `${stats.totalDistance} –∫–º`;
            metricCards[1].textContent = `${stats.avgDistance} –∫–º`;
            metricCards[2].textContent = stats.totalRuns;
        }

        console.log('–ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫:', error);
    }

    console.groupEnd();
}

function updateRecentRuns(runs) {
    console.group('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–±–µ–∂–µ–∫');
    
    try {
        const tbody = document.querySelector('.recent-runs table tbody');
        if (!tbody) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–±–µ–∂–µ–∫');
            return;
        }

        if (!runs || runs.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="4" class="empty-state">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–µ–∂–∫–∞—Ö</td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = runs.map(run => `
            <tr>
                <td>${new Date(run.date_added).toLocaleDateString()}</td>
                <td class="distance">${run.km}</td>
                <td>${run.time || '-'}</td>
                <td class="notes">${run.notes || '-'}</td>
            </tr>
        `).join('');

        console.log('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–±–µ–∂–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
    }

    console.groupEnd();
}

function updateMonthlyRuns(runs) {
    console.group('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–±–µ–∂–µ–∫');
    
    try {
        const monthsContainer = document.querySelector('.months-container');
        if (!monthsContainer) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Å—è—Ü–µ–≤');
            return;
        }

        const runsByMonth = {};
        runs.forEach(run => {
            const date = new Date(run.date_added);
            const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
            if (!runsByMonth[monthKey]) {
                runsByMonth[monthKey] = [];
            }
            runsByMonth[monthKey].push(run);
        });

        const sortedMonths = Object.keys(runsByMonth).sort().reverse();

        const monthsHTML = sortedMonths.map(monthKey => {
            const [year, month] = monthKey.split('-');
            const monthName = new Date(year, month - 1).toLocaleString('ru', { month: 'long' });
            const monthRuns = runsByMonth[monthKey];
            const totalDistance = monthRuns.reduce((sum, run) => sum + (parseFloat(run.km) || 0), 0).toFixed(1);
            
            const runsHTML = monthRuns.map(run => `
                <tr>
                    <td>${new Date(run.date_added).toLocaleDateString()}</td>
                    <td class="distance">${run.km}</td>
                    <td>${run.time || '-'}</td>
                    <td class="notes">${run.notes || '-'}</td>
                </tr>
            `).join('');

            return `
                <div class="month-section">
                    <div class="month-header" data-month="${monthKey}">
                        <h4>${monthName} ${year}</h4>
                        <div class="month-summary">
                            <span>${monthRuns.length} –ø—Ä–æ–±–µ–∂–µ–∫</span>
                            <span>${totalDistance} –∫–º</span>
                            <span class="toggle-icon">‚ñº</span>
                        </div>
                    </div>
                    <div class="month-content" id="month-${monthKey}">
                        <table>
                            <thead>
                                <tr>
                                    <th>–î–ê–¢–ê</th>
                                    <th>–î–ò–°–¢–ê–ù–¶–ò–Ø (–ö–ú)</th>
                                    <th>–í–†–ï–ú–Ø</th>
                                    <th>–ó–ê–ú–ï–¢–ö–ò</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${runsHTML}
                            </tbody>
                        </table>
                    </div>
                </div>
            `;
        }).join('');

        monthsContainer.innerHTML = monthsHTML;

        const monthHeaders = monthsContainer.querySelectorAll('.month-header');
        monthHeaders.forEach(header => {
            header.addEventListener('click', () => {
                const monthKey = header.dataset.month;
                const content = document.getElementById(`month-${monthKey}`);
                const toggleIcon = header.querySelector('.toggle-icon');
                
                content.classList.toggle('expanded');
                toggleIcon.textContent = content.classList.contains('expanded') ? '‚ñº' : '‚ñ∂';
            });
        });

        console.log('–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–±–µ–∂–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–±–µ–∂–µ–∫:', error);
    }

    console.groupEnd();
}
