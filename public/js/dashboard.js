import { checkAuth, logout, getRuns, viewLogs } from './api.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showError(message) {
    const errorLog = document.getElementById('errorLog');
    if (errorLog) {
        errorLog.textContent = message;
        errorLog.style.display = 'block';
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            errorLog.style.display = 'none';
        }, 5000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function updateProgressSection(totalDistance, yearlyGoal) {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å:', { totalDistance, yearlyGoal });
    const progressSection = document.getElementById('progressSection');
    if (yearlyGoal > 0) {
        const percentage = Math.min((totalDistance / yearlyGoal) * 100, 100);
        progressSection.innerHTML = `
            <div class="progress-info">
                <span class="progress-label">–¶–µ–ª—å –Ω–∞ –≥–æ–¥: ${yearlyGoal} –∫–º</span>
                <span class="progress-value">${percentage.toFixed(1)}%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${percentage}%"></div>
            </div>
        `;
        progressSection.style.display = 'block';
    } else {
        progressSection.style.display = 'none';
    }
}

function updateMetrics(totalDistance, avgDistance, totalRuns) {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏:', { totalDistance, avgDistance, totalRuns });
    document.querySelector('#totalDistanceCard .metric-value').textContent = `${totalDistance.toFixed(1)} –∫–º`;
    document.querySelector('#avgDistanceCard .metric-value').textContent = `${avgDistance.toFixed(1)} –∫–º`;
    document.querySelector('#totalRunsCard .metric-value').textContent = totalRuns;
}

function updateRunsTable(runs) {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–±–µ–∂–µ–∫:', runs.length);
    const tbody = document.getElementById('runsTableBody');
    tbody.innerHTML = runs.slice(0, 5).map(run => `
        <tr class="animate-fade-in">
            <td>${new Date(run.date_added).toLocaleDateString()}</td>
            <td class="distance">${run.km.toFixed(1)}</td>
            <td class="time">${run.duration || '-'}</td>
            <td class="notes">${run.notes || ''}</td>
        </tr>
    `).join('');
}

function toggleContentVisibility(hasRuns) {
    console.group('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    console.log('–ï—Å—Ç—å –ø—Ä–æ–±–µ–∂–∫–∏:', hasRuns);
    
    const progressSection = document.getElementById('progressSection');
    const metricsGrid = document.querySelector('.metrics-grid');
    const recentRuns = document.querySelector('.recent-runs');
    const actionButtons = document.querySelector('.action-buttons');
    const emptyState = document.querySelector('.empty-state') || document.createElement('div');

    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
        progressSection: !!progressSection,
        metricsGrid: !!metricsGrid,
        recentRuns: !!recentRuns,
        actionButtons: !!actionButtons,
        emptyState: !!emptyState
    });

    if (hasRuns) {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–æ–±–µ–∂–∫–∞–º–∏');
        if (progressSection) progressSection.style.display = 'block';
        if (metricsGrid) metricsGrid.style.display = 'grid';
        if (recentRuns) recentRuns.style.display = 'block';
        if (actionButtons) actionButtons.style.display = 'flex';
        if (emptyState.parentNode) {
            console.log('–£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            emptyState.remove();
        }
    } else {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        if (progressSection) progressSection.style.display = 'none';
        if (metricsGrid) metricsGrid.style.display = 'none';
        if (recentRuns) recentRuns.style.display = 'none';
        if (actionButtons) actionButtons.style.display = 'none';

        emptyState.className = 'empty-state animate-fade-in';
        emptyState.innerHTML = `
            <h2>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫</h2>
            <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö –ø—Ä–æ–±–µ–∂–∫–∞—Ö</p>
            <button id="syncButton" class="sync-button">
                <span class="button-icon">üîÑ</span>
                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Telegram
            </button>
        `;

        const content = document.querySelector('.dashboard-content');
        if (content && !document.querySelector('.empty-state')) {
            console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            content.appendChild(emptyState);
        }
    }
    console.groupEnd();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
async function handleLogout() {
    try {
        console.group('–ü—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞');
        console.log('1. –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã—Ö–æ–¥–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const user = await checkAuth(true);
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            window.location.href = '/';
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        const cookies = document.cookie.split(';');
        console.log('2. –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º:', cookies);
        
        console.log('3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é logout');
        const result = await logout();
        console.log('4. –†–µ–∑—É–ª—å—Ç–∞—Ç logout:', result);
        
        console.log('5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞:', document.cookie);
        
        console.log('6. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        console.groupEnd();
        
        window.location.href = '/';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        console.groupEnd();
        window.location.href = '/';
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData(forceCheck = false) {
    try {
        console.group('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        
        const user = await checkAuth(forceCheck);
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
            window.location.href = '/';
            return;
        }

        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        document.getElementById('welcomeMessage').textContent = `–ü—Ä–∏–≤–µ—Ç, ${user.username}! üëã`;

        const now = new Date();
        const startDate = new Date(now.getFullYear(), 0, 1).toISOString().split('T')[0];
        const endDate = now.toISOString().split('T')[0];
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–±–µ–∂–∫–∏:', { startDate, endDate });
        
        const runs = await getRuns(startDate, endDate);
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–±–µ–∂–∫–∏:', runs?.length || 0);

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        const sections = {
            progress: document.getElementById('progressSection'),
            metrics: document.querySelector('.metrics-grid'),
            runs: document.querySelector('.recent-runs'),
            actions: document.querySelector('.action-buttons')
        };

        Object.values(sections).forEach(section => {
            if (section) section.style.display = 'none';
        });

        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const existingEmptyState = document.querySelector('.empty-state');
        if (existingEmptyState) {
            existingEmptyState.remove();
        }
        
        if (runs && runs.length > 0) {
            console.log('–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            
            const totalDistance = runs.reduce((sum, run) => sum + run.km, 0);
            const yearlyGoal = user.yearly_goal || 0;
            const avgDistance = totalDistance / runs.length;
            const lastRun = new Date(runs[0].date_added);
            const daysSinceLastRun = Math.floor((now - lastRun) / (1000 * 60 * 60 * 24));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–±–µ–∂–∫–µ
            document.getElementById('lastRunInfo').textContent = daysSinceLastRun === 0 
                ? '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ —Å–µ–≥–æ–¥–Ω—è!'
                : `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞: ${daysSinceLastRun} –¥–Ω. –Ω–∞–∑–∞–¥`;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (yearlyGoal > 0) {
                const percentage = Math.min((totalDistance / yearlyGoal) * 100, 100);
                sections.progress.innerHTML = `
                    <div class="progress-info">
                        <span class="progress-label">–¶–µ–ª—å –Ω–∞ –≥–æ–¥: ${yearlyGoal} –∫–º</span>
                        <span class="progress-value">${percentage.toFixed(1)}%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${percentage}%"></div>
                    </div>
                `;
                sections.progress.style.display = 'block';
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            document.querySelector('#totalDistanceCard .metric-value').textContent = `${totalDistance.toFixed(1)} –∫–º`;
            document.querySelector('#avgDistanceCard .metric-value').textContent = `${avgDistance.toFixed(1)} –∫–º`;
            document.querySelector('#totalRunsCard .metric-value').textContent = runs.length;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–±–µ–∂–µ–∫
            document.getElementById('runsTableBody').innerHTML = runs.slice(0, 5).map(run => `
                <tr class="animate-fade-in">
                    <td>${new Date(run.date_added).toLocaleDateString()}</td>
                    <td class="distance">${run.km.toFixed(1)}</td>
                    <td class="time">${run.duration || '-'}</td>
                    <td class="notes">${run.notes || ''}</td>
                </tr>
            `).join('');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
            sections.metrics.style.display = 'grid';
            sections.runs.style.display = 'block';
            sections.actions.style.display = 'flex';
        } else {
            console.log('–ù–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            const emptyState = document.createElement('div');
            emptyState.className = 'empty-state animate-fade-in';
            emptyState.innerHTML = `
                <h2>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫</h2>
                <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö –ø—Ä–æ–±–µ–∂–∫–∞—Ö</p>
                <button id="syncButton" class="sync-button">
                    <span class="button-icon">üîÑ</span>
                    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Telegram
                </button>
            `;

            const content = document.querySelector('.dashboard-content');
            content.appendChild(emptyState);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            const syncButton = document.getElementById('syncButton');
            if (syncButton) {
                syncButton.addEventListener('click', () => {
                    window.open('https://t.me/sl_run_bot', '_blank');
                });
            }
        }
        
        console.groupEnd();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        console.groupEnd();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let initialized = false;

document.addEventListener('DOMContentLoaded', async function() {
    if (initialized) return;
    initialized = true;

    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const logoutButton = document.getElementById('logoutButton');
    if (logoutButton) {
        logoutButton.addEventListener('click', handleLogout);
    }

    const refreshButton = document.getElementById('refreshButton');
    if (refreshButton) {
        refreshButton.addEventListener('click', () => loadUserData(true));
    }

    const viewLogsButton = document.getElementById('viewLogsButton');
    if (viewLogsButton) {
        viewLogsButton.addEventListener('click', viewLogs);
    }

    const exportButton = document.getElementById('exportButton');
    if (exportButton) {
        exportButton.addEventListener('click', () => {
            showError('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    await loadUserData(false);
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}); 