import { checkAuth, logout, getRuns, viewLogs } from './api.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showError(message) {
    const errorLog = document.getElementById('errorLog');
    if (errorLog) {
        errorLog.textContent = message;
        errorLog.style.display = 'block';
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            errorLog.style.display = 'none';
        }, 5000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgressSection(totalDistance, yearlyGoal) {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å:', { totalDistance, yearlyGoal });
    const progressSection = document.getElementById('progressSection');
    if (!progressSection) {
        console.error('–°–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    if (yearlyGoal > 0) {
        const percentage = Math.min((totalDistance / yearlyGoal) * 100, 100);
        progressSection.innerHTML = `
            <div class="progress-info">
                <span class="progress-label">–¶–µ–ª—å –Ω–∞ –≥–æ–¥: ${yearlyGoal} –∫–º</span>
                <span class="progress-value">${percentage.toFixed(1)}%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${percentage}%"></div>
            </div>
        `;
        progressSection.style.display = 'block';
    } else {
        progressSection.style.display = 'none';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
function updateMetrics(totalDistance, avgDistance, totalRuns) {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏:', { totalDistance, avgDistance, totalRuns });
    const metricsGrid = document.querySelector('.metrics-grid');
    if (!metricsGrid) {
        console.error('–°–µ—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    const elements = {
        totalDistance: document.querySelector('#totalDistanceCard .metric-value'),
        avgDistance: document.querySelector('#avgDistanceCard .metric-value'),
        totalRuns: document.querySelector('#totalRunsCard .metric-value')
    };

    if (elements.totalDistance) elements.totalDistance.textContent = `${totalDistance.toFixed(1)} –∫–º`;
    if (elements.avgDistance) elements.avgDistance.textContent = `${avgDistance.toFixed(1)} –∫–º`;
    if (elements.totalRuns) elements.totalRuns.textContent = totalRuns;
    metricsGrid.style.display = 'grid';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–±–µ–∂–µ–∫
function updateRunsTable(runs) {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–±–µ–∂–µ–∫:', runs.length);
    const runsSection = document.querySelector('.recent-runs');
    const tbody = document.getElementById('runsTableBody');
    
    if (!runsSection || !tbody) {
        console.error('–°–µ–∫—Ü–∏—è –ø—Ä–æ–±–µ–∂–µ–∫ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    tbody.innerHTML = runs.slice(0, 5).map(run => `
        <tr class="animate-fade-in">
            <td>${new Date(run.date_added).toLocaleDateString()}</td>
            <td class="distance">${run.km.toFixed(1)}</td>
            <td class="time">${run.duration || '-'}</td>
            <td class="notes">${run.notes || ''}</td>
        </tr>
    `).join('');
    runsSection.style.display = 'block';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData(forceCheck = false) {
    try {
        console.group('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        
        const user = await checkAuth(forceCheck);
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
            window.location.href = '/';
            return;
        }

        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user);
        console.log('–ì–æ–¥–æ–≤–∞—è —Ü–µ–ª—å:', user.goal_km);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        const welcomeMessage = document.getElementById('welcomeMessage');
        if (welcomeMessage) {
            welcomeMessage.textContent = `–ü—Ä–∏–≤–µ—Ç, ${user.username}! üëã`;
        }

        const now = new Date();
        const startDate = new Date(now.getFullYear(), 0, 1).toISOString().split('T')[0];
        const endDate = now.toISOString().split('T')[0];
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–±–µ–∂–∫–∏:', { startDate, endDate });
        
        const runs = await getRuns(startDate, endDate);
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–±–µ–∂–∫–∏:', runs?.length || 0);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const dashboardContent = document.querySelector('.dashboard-content');
        if (!dashboardContent) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞');
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const existingEmptyState = document.querySelector('.empty-state');
        if (existingEmptyState) {
            existingEmptyState.remove();
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if (!runs || runs.length === 0) {
            console.log('–ù–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
            const sections = ['#progressSection', '.metrics-grid', '.recent-runs', '.action-buttons'];
            sections.forEach(selector => {
                const element = document.querySelector(selector);
                if (element) element.style.display = 'none';
            });
            
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const emptyState = document.createElement('div');
            emptyState.className = 'empty-state animate-fade-in';
            emptyState.innerHTML = `
                <h2>–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–±–µ–∂–µ–∫</h2>
                <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö –ø—Ä–æ–±–µ–∂–∫–∞—Ö</p>
                <button id="syncButton" class="sync-button">
                    <span class="button-icon">üîÑ</span>
                    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Telegram
                </button>
            `;
            dashboardContent.appendChild(emptyState);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            const syncButton = document.getElementById('syncButton');
            if (syncButton) {
                syncButton.addEventListener('click', () => {
                    window.open('https://t.me/sl_run_bot', '_blank');
                });
            }
        } else {
            console.log('–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            
            const totalDistance = runs.reduce((sum, run) => sum + run.km, 0);
            const yearlyGoal = user.goal_km;
            console.log('–ì–æ–¥–æ–≤–∞—è —Ü–µ–ª—å –∏–∑ goal_km:', yearlyGoal);
            const avgDistance = totalDistance / runs.length;
            const lastRun = new Date(runs[0].date_added);
            const daysSinceLastRun = Math.floor((now - lastRun) / (1000 * 60 * 60 * 24));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–±–µ–∂–∫–µ
            const lastRunInfo = document.getElementById('lastRunInfo');
            if (lastRunInfo) {
                lastRunInfo.textContent = daysSinceLastRun === 0 
                    ? '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ —Å–µ–≥–æ–¥–Ω—è!'
                    : `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞: ${daysSinceLastRun} –¥–Ω. –Ω–∞–∑–∞–¥`;
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const updates = [
                { element: document.getElementById('progressSection'), update: () => {
                    if (yearlyGoal > 0) {
                        const percentage = Math.min((totalDistance / yearlyGoal) * 100, 100);
                        return {
                            html: `
                                <div class="progress-info">
                                    <span class="progress-label">–¶–µ–ª—å –Ω–∞ –≥–æ–¥: ${yearlyGoal} –∫–º</span>
                                    <span class="progress-value">${percentage.toFixed(1)}%</span>
                                </div>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: ${percentage}%"></div>
                                </div>
                            `,
                            display: 'block'
                        };
                    }
                    return { display: 'none' };
                }},
                { element: document.querySelector('.metrics-grid'), update: () => {
                    const elements = {
                        totalDistance: document.querySelector('#totalDistanceCard .metric-value'),
                        avgDistance: document.querySelector('#avgDistanceCard .metric-value'),
                        totalRuns: document.querySelector('#totalRunsCard .metric-value')
                    };
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                    if (elements.totalDistance) elements.totalDistance.textContent = `${totalDistance.toFixed(1)} –∫–º`;
                    if (elements.avgDistance) elements.avgDistance.textContent = `${avgDistance.toFixed(1)} –∫–º`;
                    if (elements.totalRuns) elements.totalRuns.textContent = runs.length;
                    
                    return { display: 'grid' }; // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                }},
                { element: document.querySelector('.recent-runs'), update: () => {
                    const tbody = document.getElementById('runsTableBody');
                    if (tbody) {
                        tbody.innerHTML = runs.slice(0, 5).map(run => `
                            <tr class="animate-fade-in">
                                <td>${new Date(run.date_added).toLocaleDateString()}</td>
                                <td class="distance">${run.km.toFixed(1)}</td>
                                <td class="time">${run.duration || '-'}</td>
                                <td class="notes">${run.notes || ''}</td>
                            </tr>
                        `).join('');
                    }
                    return { display: 'block' }; // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                }},
                { element: document.querySelector('.action-buttons'), update: () => ({ display: 'flex' })}
            ];

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            updates.forEach(({ element, update }) => {
                if (element) {
                    console.log('–û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç:', element.className || element.id);
                    const result = update();
                    if (result.html) {
                        console.log('–û–±–Ω–æ–≤–ª—è–µ–º HTML');
                        element.innerHTML = result.html;
                    }
                    console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º display:', result.display);
                    element.style.display = result.display;
                } else {
                    console.warn('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            });
        }
        
        console.groupEnd();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        console.groupEnd();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
async function handleLogout() {
    try {
        console.group('–ü—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞');
        console.log('1. –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã—Ö–æ–¥–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const user = await checkAuth(true);
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            window.location.href = '/';
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        const cookies = document.cookie.split(';');
        console.log('2. –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º:', cookies);
        
        console.log('3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é logout');
        const result = await logout();
        console.log('4. –†–µ–∑—É–ª—å—Ç–∞—Ç logout:', result);
        
        console.log('5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞:', document.cookie);
        
        console.log('6. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        console.groupEnd();
        
        window.location.href = '/';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        console.groupEnd();
        window.location.href = '/';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let isLoading = false;

document.addEventListener('DOMContentLoaded', async function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
    
    if (isLoading) {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }
    
    isLoading = true;

    try {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const logoutButton = document.getElementById('logoutButton');
        if (logoutButton) {
            logoutButton.addEventListener('click', handleLogout);
        }

        const refreshButton = document.getElementById('refreshButton');
        if (refreshButton) {
            refreshButton.addEventListener('click', () => loadUserData(true));
        }

        const viewLogsButton = document.getElementById('viewLogsButton');
        if (viewLogsButton) {
            viewLogsButton.addEventListener('click', viewLogs);
        }

        const exportButton = document.getElementById('exportButton');
        if (exportButton) {
            exportButton.addEventListener('click', () => {
                showError('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
            });
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await loadUserData(false);
        
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } finally {
        isLoading = false;
    }
}); 