import { checkAuth, logout, getRuns, viewLogs, getTelegramBotLink } from './api.js';
import { Chart, registerables } from 'https://cdn.jsdelivr.net/npm/chart.js@4.4.1/+esm';
import ApexCharts from 'https://cdn.jsdelivr.net/npm/apexcharts@3.45.1/+esm';
import { TrainingPlanForm } from './components/TrainingPlanForm.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatNumber(value) {
    if (value === null || value === undefined || isNaN(value)) {
        return '0.00';
    }
    return Number(value).toFixed(2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showError(message) {
    const errorLog = document.getElementById('errorLog');
    if (errorLog) {
        errorLog.textContent = message;
        errorLog.style.display = 'block';
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            errorLog.style.display = 'none';
        }, 5000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgressSection(totalDistance, yearlyGoal) {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å:', { totalDistance, yearlyGoal });
    const progressSection = document.getElementById('progressSection');
    if (!progressSection) {
        console.error('–°–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    if (yearlyGoal > 0) {
        const percentage = Math.min((totalDistance / yearlyGoal) * 100, 100);
        progressSection.innerHTML = `
            <div class="progress-info">
                <span class="progress-label">–¶–µ–ª—å –Ω–∞ –≥–æ–¥: ${yearlyGoal} –∫–º</span>
                <span class="progress-value">${percentage.toFixed(1)}%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${percentage}%"></div>
            </div>
        `;
        progressSection.style.display = 'block';
    } else {
        progressSection.style.display = 'none';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
function updateMetrics(totalDistance, avgDistance, totalRuns) {
    console.log('–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏:', { totalDistance, avgDistance, totalRuns });
    const metricsGrid = document.querySelector('.metrics-grid');
    if (!metricsGrid) {
        console.error('–°–µ—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    const elements = {
        totalDistance: document.querySelector('#totalDistanceCard .metric-value'),
        avgDistance: document.querySelector('#avgDistanceCard .metric-value'),
        totalRuns: document.querySelector('#totalRunsCard .metric-value')
    };

    if (elements.totalDistance) elements.totalDistance.textContent = `${totalDistance.toFixed(1)} –∫–º`;
    if (elements.avgDistance) elements.avgDistance.textContent = `${avgDistance.toFixed(1)} –∫–º`;
    if (elements.totalRuns) elements.totalRuns.textContent = totalRuns;
    metricsGrid.style.display = 'grid';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–±–µ–∂–µ–∫
function updateRunsTable(runs) {
    console.group('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–±–µ–∂–µ–∫');
    console.log('–ü—Ä–æ–±–µ–∂–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã:', runs);
    
    const runsSection = document.querySelector('.recent-runs');
    const tbody = document.getElementById('runsTableBody');
    
    if (!runsSection || !tbody) {
        console.error('–°–µ–∫—Ü–∏—è –ø—Ä–æ–±–µ–∂–µ–∫ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.groupEnd();
        return;
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    tbody.innerHTML = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!runs || runs.length === 0) {
        runsSection.style.display = 'none';
        console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        console.groupEnd();
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–∂–∫–∞–º–∏
    runs.forEach(run => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${new Date(run.date_added).toLocaleDateString()}</td>
            <td class="distance">${run.km.toFixed(1)}</td>
            <td class="time">${run.duration || '-'}</td>
            <td class="notes">${run.notes || ''}</td>
        `;
        tbody.appendChild(tr);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å –ø—Ä–æ–±–µ–∂–∫–∞–º–∏
    runsSection.style.display = 'block';
    
    console.log('–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    console.groupEnd();
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
let currentPeriod = 'year';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç –ø–µ—Ä–∏–æ–¥–∞
function getPeriodDates(period) {
    const now = new Date();
    let startDate;
    
    switch(period) {
        case 'week':
            startDate = new Date(now);
            startDate.setDate(now.getDate() - 7);
            break;
        case 'month':
            startDate = new Date(now.getFullYear(), now.getMonth(), 1);
            break;
        case 'year':
        default:
            startDate = new Date(now.getFullYear(), 0, 1);
            break;
    }
    
    return {
        startDate: startDate.toISOString().split('T')[0],
        endDate: now.toISOString().split('T')[0]
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
async function updatePeriod(period) {
    const periodButtons = document.querySelectorAll('.period-button');
    periodButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.period === period);
    });
    currentPeriod = period;
    await loadUserData(false);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram
async function handleTelegramSync() {
    const result = await getTelegramBotLink();
    if (result.success) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        window.open(result.link, '_blank');
    } else {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function createBaseStructure() {
    return `
        <h2 id="welcomeMessage"></h2>
        <p id="lastRunInfo"></p>
        
        <div class="period-selector">
            <button class="period-button" data-period="week">–ù–µ–¥–µ–ª—è</button>
            <button class="period-button" data-period="month">–ú–µ—Å—è—Ü</button>
            <button class="period-button active" data-period="year">–ì–æ–¥</button>
        </div>

        <div id="progressSection" class="progress-section"></div>
        
        <div class="metrics-grid">
            <div class="metric-card" id="totalDistanceCard">
                <div class="metric-title">–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è</div>
                <div class="metric-value">0 –∫–º</div>
            </div>
            <div class="metric-card" id="avgDistanceCard">
                <div class="metric-title">–°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è</div>
                <div class="metric-value">0 –∫–º</div>
            </div>
            <div class="metric-card" id="totalRunsCard">
                <div class="metric-title">–í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫</div>
                <div class="metric-value">0</div>
            </div>
        </div>

        <div class="recent-runs" style="display: none;">
            <h3>–ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏</h3>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>–î–∞—Ç–∞</th>
                            <th>–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)</th>
                            <th>–í—Ä–µ–º—è</th>
                            <th>–ó–∞–º–µ—Ç–∫–∏</th>
                        </tr>
                    </thead>
                    <tbody id="runsTableBody"></tbody>
                </table>
            </div>
        </div>

        <div class="action-buttons">
            <button id="refreshButton" class="action-button">
                <span class="button-icon">üîÑ</span>
                –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </button>
            <button id="viewLogsButton" class="action-button">
                <span class="button-icon">üìã</span>
                –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
            </button>
            <button id="exportButton" class="action-button">
                <span class="button-icon">üìä</span>
                –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            </button>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–æ–∫
function initializeTabs() {
    console.group('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫');
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const existingNavigation = document.querySelector('.tab-navigation');
    if (existingNavigation) {
        existingNavigation.remove();
    }
    const existingTabContainers = document.querySelector('.tab-containers');
    if (existingTabContainers) {
        existingTabContainers.remove();
    }

    const mainContent = document.querySelector('.dashboard-content');
    if (!mainContent) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        console.groupEnd();
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const tabNavigation = document.createElement('div');
    tabNavigation.className = 'tab-navigation';
    tabNavigation.innerHTML = `
        <button class="tab-button active" data-tab="current">–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ</button>
        <button class="tab-button" data-tab="analytics">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</button>
        <button class="tab-button" data-tab="training">–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</button>
    `;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
    const tabContainers = document.createElement('div');
    tabContainers.className = 'tab-containers';
    tabContainers.innerHTML = `
        <div id="currentTab" class="tab-content active"></div>
        <div id="analyticsTab" class="tab-content"></div>
        <div id="trainingTab" class="tab-content"></div>
    `;

    // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    mainContent.innerHTML = '';

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    mainContent.appendChild(tabNavigation);
    mainContent.appendChild(tabContainers);

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
    const currentTab = document.getElementById('currentTab');
    currentTab.innerHTML = createBaseStructure();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    const existingStyle = document.querySelector('style[data-tabs-style]');
    if (!existingStyle) {
        const style = document.createElement('style');
        style.setAttribute('data-tabs-style', 'true');
        style.textContent = `
            .tab-navigation {
                display: flex;
                gap: 10px;
                margin-bottom: 20px;
                border-bottom: 1px solid #eee;
                padding-bottom: 10px;
            }

            .tab-button {
                padding: 8px 16px;
                border: none;
                background: none;
                cursor: pointer;
                font-size: 16px;
                color: #666;
                border-radius: 4px;
                transition: all 0.3s ease;
            }

            .tab-button:hover {
                background: #f0f0f0;
            }

            .tab-button.active {
                color: #4a69bd;
                font-weight: bold;
                background: #e8f0fe;
            }

            .tab-content {
                display: none;
            }

            .tab-content.active {
                display: block;
            }

            .period-selector {
                margin: 20px 0;
            }

            .period-button {
                padding: 8px 16px;
                margin-right: 10px;
                border: 1px solid #ddd;
                background: white;
                border-radius: 4px;
                cursor: pointer;
            }

            .period-button.active {
                background: #4a69bd;
                color: white;
                border-color: #4a69bd;
            }

            .metrics-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }

            .metric-card {
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            .recent-runs {
                margin-top: 20px;
                background: white;
                border-radius: 8px;
                padding: 20px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            .table-container {
                overflow-x: auto;
                margin-top: 10px;
            }

            .recent-runs table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 10px;
            }

            .recent-runs th,
            .recent-runs td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #eee;
            }

            .recent-runs th {
                background-color: #f8f9fa;
                font-weight: 600;
                color: #333;
            }

            .recent-runs tr:hover {
                background-color: #f8f9fa;
            }

            .recent-runs td.distance {
                font-weight: 500;
                color: #4a69bd;
            }

            .recent-runs td.notes {
                color: #666;
                font-style: italic;
            }

            .action-buttons {
                display: flex;
                gap: 10px;
                margin-top: 20px;
            }

            .action-button {
                padding: 8px 16px;
                border: 1px solid #ddd;
                background: white;
                border-radius: 4px;
                cursor: pointer;
                display: flex;
                align-items: center;
                gap: 5px;
            }

            .button-icon {
                font-size: 16px;
            }

            @media (max-width: 768px) {
                .recent-runs {
                    padding: 15px;
                }

                .recent-runs th,
                .recent-runs td {
                    padding: 8px;
                    font-size: 14px;
                }
            }
        `;
        document.head.appendChild(style);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const buttons = tabNavigation.querySelectorAll('.tab-button');
    buttons.forEach(button => {
        button.addEventListener('click', () => switchTab(button.dataset.tab));
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
    const periodButtons = currentTab.querySelectorAll('.period-button');
    periodButtons.forEach(button => {
        button.addEventListener('click', () => updatePeriod(button.dataset.period));
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    const refreshButton = currentTab.querySelector('#refreshButton');
    if (refreshButton) {
        refreshButton.addEventListener('click', () => loadUserData(true));
    }

    const viewLogsButton = currentTab.querySelector('#viewLogsButton');
    if (viewLogsButton) {
        viewLogsButton.addEventListener('click', viewLogs);
    }

    const exportButton = currentTab.querySelector('#exportButton');
    if (exportButton) {
        exportButton.addEventListener('click', () => {
            showError('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
    }

    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.groupEnd();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadUserData
async function loadUserData(forceCheck = false) {
    try {
        console.group('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const user = await checkAuth(forceCheck);
        if (!user) {
            window.location.href = '/';
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const { startDate, endDate } = getPeriodDates(currentPeriod);
        const response = await getRuns(startDate, endDate);
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const runs = Array.isArray(response) ? response : [];
        console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–∂–∫–∏:', runs);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        const data = {
            hasRuns: runs && runs.length > 0,
            welcomeMessage: `–ü—Ä–∏–≤–µ—Ç, ${user.username}! üëã`,
            yearlyGoal: user.yearly_goal,
            stats: null,
            recentRuns: null
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º DOM
        const currentTab = document.getElementById('currentTab');
        if (currentTab) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            const welcomeMessage = currentTab.querySelector('#welcomeMessage');
            if (welcomeMessage) welcomeMessage.textContent = data.welcomeMessage;

            if (data.hasRuns) {
                const totalDistance = runs.reduce((sum, run) => sum + run.km, 0);
                const avgDistance = totalDistance / runs.length;
                const lastRun = new Date(runs[0].date_added);
                const daysSinceLastRun = Math.floor((new Date() - lastRun) / (1000 * 60 * 60 * 24));

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–±–µ–∂–∫–µ
                const lastRunInfo = currentTab.querySelector('#lastRunInfo');
                if (lastRunInfo) {
                    lastRunInfo.textContent = daysSinceLastRun === 0 
                        ? '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ —Å–µ–≥–æ–¥–Ω—è!'
                        : `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞: ${daysSinceLastRun} –¥–Ω. –Ω–∞–∑–∞–¥`;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                updateProgressSection(totalDistance, data.yearlyGoal);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                updateMetrics(totalDistance, avgDistance, runs.length);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–±–µ–∂–µ–∫
                updateRunsTable(runs.slice(0, 5));
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                showEmptyState();
            }
        }

        console.groupEnd();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        console.groupEnd();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
async function handleLogout() {
    try {
        console.group('–ü—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞');
        console.log('1. –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã—Ö–æ–¥–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const user = await checkAuth(true);
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            window.location.href = '/';
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        const cookies = document.cookie.split(';');
        console.log('2. –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º:', cookies);
        
        console.log('3. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é logout');
        const result = await logout();
        console.log('4. –†–µ–∑—É–ª—å—Ç–∞—Ç logout:', result);
        
        console.log('5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞:', document.cookie);
        
        console.log('6. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        console.groupEnd();
        
        window.location.href = '/';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        console.groupEnd();
        window.location.href = '/';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
async function switchTab(tabName) {
    console.group('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        const buttons = document.querySelectorAll('.tab-button');
        buttons.forEach(button => {
            button.classList.toggle('active', button.dataset.tab === tabName);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const tabs = document.querySelectorAll('.tab-content');
        tabs.forEach(tab => {
            tab.classList.toggle('active', tab.id === `${tabName}Tab`);
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        if (tabName === 'training') {
            const trainingTab = document.getElementById('trainingTab');
            if (trainingTab && !trainingTab.querySelector('.training-plan-form-container')) {
                console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
                new TrainingPlanForm(trainingTab);
            }
        } else if (tabName === 'analytics') {
            const analyticsTab = document.getElementById('analyticsTab');
            if (analyticsTab) {
                console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            }
        } else if (tabName === 'current') {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
            await loadUserData();
        }

        console.log('–í–∫–ª–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏');
    }

    console.groupEnd();
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
function createRunningTrendsChart(runs) {
    const ctx = document.getElementById('runningTrendsChart');
    if (!ctx) return;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–∂–∫–∏ –ø–æ –¥–∞—Ç–µ
    const sortedRuns = [...runs].sort((a, b) => new Date(a.date_added) - new Date(b.date_added));
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = {
        labels: sortedRuns.map(run => new Date(run.date_added).toLocaleDateString()),
        datasets: [{
            label: '–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)',
            data: sortedRuns.map(run => run.km),
            borderColor: 'rgb(75, 192, 192)',
            tension: 0.1,
            fill: false
        }]
    };

    new Chart(ctx, {
        type: 'line',
        data: data,
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: '–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–±–µ–∂–µ–∫'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: '–ö–∏–ª–æ–º–µ—Ç—Ä—ã'
                    }
                }
            }
        }
    });
}

function createActivityHeatmap(runs) {
    const ctx = document.getElementById('activityHeatmap');
    if (!ctx) return;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    const activityByDay = new Array(7).fill(0);

    runs.forEach(run => {
        const date = new Date(run.date_added);
        const dayIndex = (date.getDay() + 6) % 7; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 0 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –≤ 6
        activityByDay[dayIndex]++;
    });

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: daysOfWeek,
            datasets: [{
                label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–∂–µ–∫',
                data: activityByDay,
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgb(75, 192, 192)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–∂–µ–∫'
                    }
                }
            }
        }
    });
}

function createDistanceDistributionChart(runs) {
    const ctx = document.getElementById('distanceDistribution');
    if (!ctx) return;

    // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∏—Å—Ç–∞–Ω—Ü–∏–π
    const ranges = [
        { min: 0, max: 3, label: '0-3 –∫–º' },
        { min: 3, max: 5, label: '3-5 –∫–º' },
        { min: 5, max: 10, label: '5-10 –∫–º' },
        { min: 10, max: 15, label: '10-15 –∫–º' },
        { min: 15, max: Infinity, label: '15+ –∫–º' }
    ];

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–∂–µ–∫ –≤ –∫–∞–∂–¥–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const distribution = ranges.map(range => ({
        ...range,
        count: runs.filter(run => run.km >= range.min && run.km < range.max).length
    }));

    new Chart(ctx, {
        type: 'pie',
        data: {
            labels: distribution.map(d => d.label),
            datasets: [{
                data: distribution.map(d => d.count),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 206, 86, 0.6)',
                    'rgba(75, 192, 192, 0.6)',
                    'rgba(153, 102, 255, 0.6)'
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–π'
                }
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadDetailedAnalytics
async function loadDetailedAnalytics() {
    try {
        console.group('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
        
        const response = await getRuns(null, null);
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–±–µ–∂–∫–∏:', response);

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –ø—Ä–æ–±–µ–∂–µ–∫
        const allRuns = Array.isArray(response) ? response : [];

        if (allRuns.length === 0) {
            showEmptyState();
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–∂–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        const monthlyRuns = allRuns.reduce((groups, run) => {
            const date = new Date(run.date_added);
            const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;
            if (!groups[monthKey]) {
                groups[monthKey] = [];
            }
            groups[monthKey].push(run);
            return groups;
        }, {});

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        const analyticsTab = document.getElementById('analyticsTab');
        analyticsTab.innerHTML = `
            <div class="analytics-container">
                ${createMonthlyStats(monthlyRuns)}
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            .analytics-container {
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
            }

            .month-section {
                background: white;
                border-radius: 15px;
                padding: 20px;
                margin-bottom: 20px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            .month-title {
                font-size: 20px;
                font-weight: bold;
                color: #333;
                margin-bottom: 15px;
                padding-bottom: 10px;
                border-bottom: 1px solid #eee;
            }

            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                margin-bottom: 20px;
            }

            .stat-item {
                padding: 10px;
                background: #f8f9fa;
                border-radius: 8px;
            }

            .stat-label {
                color: #666;
                font-size: 14px;
                margin-bottom: 5px;
            }

            .stat-value {
                color: #333;
                font-size: 16px;
                font-weight: bold;
            }

            .runs-list {
                border-top: 1px solid #eee;
                padding-top: 15px;
            }

            .run-item {
                display: flex;
                justify-content: space-between;
                padding: 10px;
                border-bottom: 1px solid #eee;
            }

            .run-date {
                color: #666;
                min-width: 120px;
            }

            .run-distance {
                font-weight: bold;
                color: #333;
            }

            .run-notes {
                color: #666;
                font-style: italic;
                margin-left: 20px;
                flex-grow: 1;
            }

            @media (max-width: 768px) {
                .analytics-container {
                    padding: 10px;
                }

                .month-section {
                    padding: 15px;
                }

                .stats-grid {
                    grid-template-columns: 1fr;
                    gap: 10px;
                }

                .run-item {
                    flex-direction: column;
                    gap: 5px;
                }

                .run-notes {
                    margin-left: 0;
                }
            }
        `;
        document.head.appendChild(style);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É');
    }
}

function createMonthlyStats(monthlyRuns) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const sortedMonths = Object.keys(monthlyRuns).sort().reverse();

    return sortedMonths.map(monthKey => {
        const runs = monthlyRuns[monthKey];
        const [year, month] = monthKey.split('-');
        const date = new Date(year, month - 1);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
        const totalDistance = runs.reduce((sum, run) => sum + run.km, 0);
        const avgDistance = totalDistance / runs.length;
        const maxRun = Math.max(...runs.map(run => run.km));
        const minRun = Math.min(...runs.map(run => run.km));
        const totalRuns = runs.length;

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–∂–∫–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedRuns = [...runs].sort((a, b) => new Date(b.date_added) - new Date(a.date_added));

        return `
            <div class="month-section">
                <div class="month-title">
                    ${date.toLocaleString('ru-RU', { month: 'long', year: 'numeric' })}
                </div>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-label">–í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫</div>
                        <div class="stat-value">${totalRuns}</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è</div>
                        <div class="stat-value">${formatNumber(totalDistance)} –∫–º</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è</div>
                        <div class="stat-value">${formatNumber(avgDistance)} –∫–º</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">–õ—É—á—à–∞—è –ø—Ä–æ–±–µ–∂–∫–∞</div>
                        <div class="stat-value">${formatNumber(maxRun)} –∫–º</div>
                    </div>
                </div>
                <div class="runs-list">
                    ${sortedRuns.map(run => `
                        <div class="run-item">
                            <span class="run-date">
                                ${new Date(run.date_added).toLocaleDateString('ru-RU', {
                                    day: 'numeric',
                                    month: 'short'
                                })}
                            </span>
                            <span class="run-distance">${formatNumber(run.km)} –∫–º</span>
                            ${run.notes ? `<span class="run-notes">${run.notes}</span>` : ''}
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }).join('');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function showEmptyState() {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    document.getElementById('analyticsTab').innerHTML = `
        <div class="empty-state">
            <h2>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–µ–∂–∫–∞—Ö</h2>
            <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–∏—Ö –ø—Ä–æ–±–µ–∂–∫–∞—Ö</p>
            <button id="syncButtonAnalytics" class="sync-button">
                <span class="button-icon">üîÑ</span>
                –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Telegram
            </button>
        </div>
    `;
    
    const syncButton = document.getElementById('syncButtonAnalytics');
    if (syncButton) {
        syncButton.addEventListener('click', handleTelegramSync);
    }
    console.groupEnd();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–ª–∞–Ω–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
function loadTrainingPlan() {
    const trainingTab = document.getElementById('trainingTab');
    if (!trainingTab) return;

    trainingTab.innerHTML = `
        <div class="training-plan-container">
            <div class="request-section">
                <h2>–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h2>
                <div class="goals-form">
                    <div class="form-group">
                        <label for="mainGoal">–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å</label>
                        <select id="mainGoal" class="form-control">
                            <option value="improve_endurance">–£–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å</option>
                            <option value="increase_distance">–£–≤–µ–ª–∏—á–∏—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é</option>
                            <option value="improve_speed">–£–ª—É—á—à–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å</option>
                            <option value="weight_loss">–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞</option>
                            <option value="marathon_prep">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="trainingDays">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é</label>
                        <select id="trainingDays" class="form-control">
                            <option value="2">2 –¥–Ω—è</option>
                            <option value="3" selected>3 –¥–Ω—è</option>
                            <option value="4">4 –¥–Ω—è</option>
                            <option value="5">5 –¥–Ω–µ–π</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="currentLevel">–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å</label>
                        <select id="currentLevel" class="form-control">
                            <option value="beginner">–ù–∞—á–∏–Ω–∞—é—â–∏–π (–¥–æ 5 –∫–º)</option>
                            <option value="intermediate">–°—Ä–µ–¥–Ω–∏–π (5-10 –∫–º)</option>
                            <option value="advanced">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 10 –∫–º)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="additionalNotes">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</label>
                        <textarea id="additionalNotes" class="form-control" rows="3" 
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏"></textarea>
                    </div>
                    <button id="generatePlanButton" class="primary-button">
                        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
                    </button>
                </div>
            </div>
            <div id="planResult" class="plan-result" style="display: none;">
                <div class="plan-header">
                    <h3>–í–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h3>
                    <div class="plan-actions">
                        <button class="secondary-button" onclick="savePlan()">
                            <span class="button-icon">üíæ</span> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                        <button class="secondary-button" onclick="sharePlan()">
                            <span class="button-icon">üì§</span> –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                        </button>
                    </div>
                </div>
                <div class="plan-content">
                    <div class="plan-overview">
                        <div class="overview-item">
                            <span class="overview-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∞:</span>
                            <span class="overview-value">4 –Ω–µ–¥–µ–ª–∏</span>
                        </div>
                        <div class="overview-item">
                            <span class="overview-label">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:</span>
                            <span class="overview-value">3</span>
                        </div>
                        <div class="overview-item">
                            <span class="overview-label">–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è:</span>
                            <span class="overview-value">120 –∫–º</span>
                        </div>
                    </div>
                    <div class="weekly-plans">
                        <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–ª–∞–Ω–∞ -->
                    </div>
                </div>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.textContent = `
        .training-plan-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .request-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .request-section h2 {
            margin: 0 0 20px 0;
            color: #333;
            font-size: 24px;
        }

        .goals-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .form-group label {
            color: #666;
            font-size: 14px;
        }

        .form-control {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
        }

        .primary-button {
            background: #4e73df;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .primary-button:hover {
            background: #2e59d9;
        }

        .plan-result {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .plan-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }

        .plan-actions {
            display: flex;
            gap: 10px;
        }

        .secondary-button {
            background: #f8f9fa;
            border: 1px solid #ddd;
            padding: 8px 15px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .secondary-button:hover {
            background: #e9ecef;
        }

        .plan-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
        }

        .overview-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .overview-label {
            color: #666;
            font-size: 14px;
        }

        .overview-value {
            color: #333;
            font-size: 18px;
            font-weight: bold;
        }

        .weekly-plans {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .training-plan-container {
                padding: 10px;
            }

            .plan-header {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }

            .plan-actions {
                width: 100%;
                justify-content: space-between;
            }

            .plan-overview {
                grid-template-columns: 1fr;
            }
        }
    `;
    document.head.appendChild(style);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
    const generateButton = document.getElementById('generatePlanButton');
    if (generateButton) {
        generateButton.addEventListener('click', generateTrainingPlan);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async function generateTrainingPlan() {
    const planResult = document.getElementById('planResult');
    const weeklyPlans = planResult.querySelector('.weekly-plans');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    planResult.style.display = 'block';
    
    // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞ (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API)
    weeklyPlans.innerHTML = `
        <div class="week-plan">
            <h4>–ù–µ–¥–µ–ª—è 1 - –ê–¥–∞–ø—Ç–∞—Ü–∏—è</h4>
            <div class="training-days">
                <div class="training-day">
                    <div class="day-header">
                        <span class="day-title">–î–µ–Ω—å 1</span>
                        <span class="day-type">–õ–µ–≥–∫–∞—è –ø—Ä–æ–±–µ–∂–∫–∞</span>
                    </div>
                    <div class="day-content">
                        <div class="workout-details">
                            <span class="detail-item">üèÉ‚Äç‚ôÇÔ∏è –î–∏—Å—Ç–∞–Ω—Ü–∏—è: 5 –∫–º</span>
                            <span class="detail-item">‚è±Ô∏è –¢–µ–º–ø: 7:00 –º–∏–Ω/–∫–º</span>
                            <span class="detail-item">üí™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: –ù–∏–∑–∫–∞—è</span>
                        </div>
                        <div class="workout-notes">
                            –†–∞–∑–º–∏–Ω–∫–∞ 5-10 –º–∏–Ω—É—Ç, –ª–µ–≥–∫–∏–π –±–µ–≥ –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º —Ç–µ–º–ø–µ, –∑–∞–º–∏–Ω–∫–∞ 5 –º–∏–Ω—É—Ç
                        </div>
                    </div>
                </div>
                <!-- –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–Ω–µ–π –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ -->
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–ª–∞–Ω–∞
    const style = document.createElement('style');
    style.textContent += `
        .week-plan {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .week-plan h4 {
            margin: 0 0 15px 0;
            color: #333;
            font-size: 18px;
        }

        .training-days {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .training-day {
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .day-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .day-title {
            font-weight: bold;
            color: #333;
        }

        .day-type {
            color: #666;
            font-size: 14px;
        }

        .workout-details {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 10px;
        }

        .detail-item {
            color: #333;
            font-size: 14px;
        }

        .workout-notes {
            color: #666;
            font-size: 14px;
            font-style: italic;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 6px;
        }
    `;
    document.head.appendChild(style);
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
async function initDashboard() {
    console.group('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const user = await checkAuth();
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
            window.location.href = '/login.html';
            return;
        }

        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫–∏
        initializeTabs();
        console.log('–í–∫–ª–∞–¥–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        await loadUserData();
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –µ—Å–ª–∏ –º—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ
        const activeTab = document.querySelector('.tab-button.active');
        if (activeTab && activeTab.dataset.tab === 'training') {
            const trainingTab = document.getElementById('trainingTab');
            if (trainingTab && !trainingTab.querySelector('.training-plan-form-container')) {
                new TrainingPlanForm(trainingTab);
                console.log('–§–æ—Ä–º–∞ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            }
        }

        console.log('–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
    
    console.groupEnd();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initDashboard);

function initializeDashboard() {
    // ... existing code ...
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    const tabContent = document.querySelector('.tab-content');
    const trainingPlanTab = document.createElement('div');
    trainingPlanTab.id = 'trainingPlanTab';
    trainingPlanTab.className = 'tab-pane';
    tabContent.appendChild(trainingPlanTab);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
    const tabSwitcher = document.querySelector('.tab-switcher');
    const trainingPlanButton = document.createElement('button');
    trainingPlanButton.className = 'tab-button';
    trainingPlanButton.textContent = '–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫';
    trainingPlanButton.onclick = () => switchTab('trainingPlanTab');
    tabSwitcher.appendChild(trainingPlanButton);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
    new TrainingPlanForm(trainingPlanTab);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    console.group('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
    const logoutButton = document.getElementById('logoutButton');
    if (logoutButton) {
        logoutButton.addEventListener('click', handleLogout);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(button => {
        button.addEventListener('click', () => switchTab(button.dataset.tab));
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
    const periodButtons = document.querySelectorAll('.period-button');
    periodButtons.forEach(button => {
        button.addEventListener('click', () => updatePeriod(button.dataset.period));
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const refreshButton = document.getElementById('refreshButton');
    if (refreshButton) {
        refreshButton.addEventListener('click', () => loadUserData(true));
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    const viewLogsButton = document.getElementById('viewLogsButton');
    if (viewLogsButton) {
        viewLogsButton.addEventListener('click', viewLogs);
    }

    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.groupEnd();
} 